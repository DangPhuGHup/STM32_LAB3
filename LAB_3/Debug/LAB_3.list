
LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002304  08002304  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002304  08002304  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002304  08002304  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002308  08002308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800230c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002318  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002318  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007df9  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017da  00000000  00000000  00027e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  00029650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074c  00000000  00000000  00029fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001459  00000000  00000000  0002a71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b009  00000000  00000000  0002bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008232f  00000000  00000000  00036b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002680  00000000  00000000  000b8eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000bb530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022c8 	.word	0x080022c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080022c8 	.word	0x080022c8

0800014c <display_1>:
 *      Author: Admin
 */
#include "led7_segment.h"

void display_1(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(num)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 818a 	bhi.w	8000470 <display_1+0x324>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display_1+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d7 	.word	0x080001d7
 800016c:	08000221 	.word	0x08000221
 8000170:	0800026b 	.word	0x0800026b
 8000174:	080002b5 	.word	0x080002b5
 8000178:	080002ff 	.word	0x080002ff
 800017c:	08000349 	.word	0x08000349
 8000180:	08000393 	.word	0x08000393
 8000184:	080003dd 	.word	0x080003dd
 8000188:	08000427 	.word	0x08000427
	{
		case 0:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2104      	movs	r1, #4
 8000190:	48ba      	ldr	r0, [pc, #744]	; (800047c <display_1+0x330>)
 8000192:	f001 f89b 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2108      	movs	r1, #8
 800019a:	48b8      	ldr	r0, [pc, #736]	; (800047c <display_1+0x330>)
 800019c:	f001 f896 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2110      	movs	r1, #16
 80001a4:	48b5      	ldr	r0, [pc, #724]	; (800047c <display_1+0x330>)
 80001a6:	f001 f891 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2120      	movs	r1, #32
 80001ae:	48b3      	ldr	r0, [pc, #716]	; (800047c <display_1+0x330>)
 80001b0:	f001 f88c 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2140      	movs	r1, #64	; 0x40
 80001b8:	48b0      	ldr	r0, [pc, #704]	; (800047c <display_1+0x330>)
 80001ba:	f001 f887 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2180      	movs	r1, #128	; 0x80
 80001c2:	48ae      	ldr	r0, [pc, #696]	; (800047c <display_1+0x330>)
 80001c4:	f001 f882 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ce:	48ab      	ldr	r0, [pc, #684]	; (800047c <display_1+0x330>)
 80001d0:	f001 f87c 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 80001d4:	e14d      	b.n	8000472 <display_1+0x326>
		case 1:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_SET);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2104      	movs	r1, #4
 80001da:	48a8      	ldr	r0, [pc, #672]	; (800047c <display_1+0x330>)
 80001dc:	f001 f876 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2108      	movs	r1, #8
 80001e4:	48a5      	ldr	r0, [pc, #660]	; (800047c <display_1+0x330>)
 80001e6:	f001 f871 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2110      	movs	r1, #16
 80001ee:	48a3      	ldr	r0, [pc, #652]	; (800047c <display_1+0x330>)
 80001f0:	f001 f86c 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2120      	movs	r1, #32
 80001f8:	48a0      	ldr	r0, [pc, #640]	; (800047c <display_1+0x330>)
 80001fa:	f001 f867 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	2140      	movs	r1, #64	; 0x40
 8000202:	489e      	ldr	r0, [pc, #632]	; (800047c <display_1+0x330>)
 8000204:	f001 f862 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	2180      	movs	r1, #128	; 0x80
 800020c:	489b      	ldr	r0, [pc, #620]	; (800047c <display_1+0x330>)
 800020e:	f001 f85d 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000218:	4898      	ldr	r0, [pc, #608]	; (800047c <display_1+0x330>)
 800021a:	f001 f857 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 800021e:	e128      	b.n	8000472 <display_1+0x326>
		case 2:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2104      	movs	r1, #4
 8000224:	4895      	ldr	r0, [pc, #596]	; (800047c <display_1+0x330>)
 8000226:	f001 f851 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	2108      	movs	r1, #8
 800022e:	4893      	ldr	r0, [pc, #588]	; (800047c <display_1+0x330>)
 8000230:	f001 f84c 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4890      	ldr	r0, [pc, #576]	; (800047c <display_1+0x330>)
 800023a:	f001 f847 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2120      	movs	r1, #32
 8000242:	488e      	ldr	r0, [pc, #568]	; (800047c <display_1+0x330>)
 8000244:	f001 f842 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	488b      	ldr	r0, [pc, #556]	; (800047c <display_1+0x330>)
 800024e:	f001 f83d 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	4889      	ldr	r0, [pc, #548]	; (800047c <display_1+0x330>)
 8000258:	f001 f838 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000262:	4886      	ldr	r0, [pc, #536]	; (800047c <display_1+0x330>)
 8000264:	f001 f832 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 8000268:	e103      	b.n	8000472 <display_1+0x326>
		case 3:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	2104      	movs	r1, #4
 800026e:	4883      	ldr	r0, [pc, #524]	; (800047c <display_1+0x330>)
 8000270:	f001 f82c 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	2108      	movs	r1, #8
 8000278:	4880      	ldr	r0, [pc, #512]	; (800047c <display_1+0x330>)
 800027a:	f001 f827 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2110      	movs	r1, #16
 8000282:	487e      	ldr	r0, [pc, #504]	; (800047c <display_1+0x330>)
 8000284:	f001 f822 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2120      	movs	r1, #32
 800028c:	487b      	ldr	r0, [pc, #492]	; (800047c <display_1+0x330>)
 800028e:	f001 f81d 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	2140      	movs	r1, #64	; 0x40
 8000296:	4879      	ldr	r0, [pc, #484]	; (800047c <display_1+0x330>)
 8000298:	f001 f818 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	4876      	ldr	r0, [pc, #472]	; (800047c <display_1+0x330>)
 80002a2:	f001 f813 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ac:	4873      	ldr	r0, [pc, #460]	; (800047c <display_1+0x330>)
 80002ae:	f001 f80d 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 80002b2:	e0de      	b.n	8000472 <display_1+0x326>
		case 4:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2104      	movs	r1, #4
 80002b8:	4870      	ldr	r0, [pc, #448]	; (800047c <display_1+0x330>)
 80002ba:	f001 f807 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	2108      	movs	r1, #8
 80002c2:	486e      	ldr	r0, [pc, #440]	; (800047c <display_1+0x330>)
 80002c4:	f001 f802 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2110      	movs	r1, #16
 80002cc:	486b      	ldr	r0, [pc, #428]	; (800047c <display_1+0x330>)
 80002ce:	f000 fffd 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 80002d2:	2201      	movs	r2, #1
 80002d4:	2120      	movs	r1, #32
 80002d6:	4869      	ldr	r0, [pc, #420]	; (800047c <display_1+0x330>)
 80002d8:	f000 fff8 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2140      	movs	r1, #64	; 0x40
 80002e0:	4866      	ldr	r0, [pc, #408]	; (800047c <display_1+0x330>)
 80002e2:	f000 fff3 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2180      	movs	r1, #128	; 0x80
 80002ea:	4864      	ldr	r0, [pc, #400]	; (800047c <display_1+0x330>)
 80002ec:	f000 ffee 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f6:	4861      	ldr	r0, [pc, #388]	; (800047c <display_1+0x330>)
 80002f8:	f000 ffe8 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 80002fc:	e0b9      	b.n	8000472 <display_1+0x326>
		case 5:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2104      	movs	r1, #4
 8000302:	485e      	ldr	r0, [pc, #376]	; (800047c <display_1+0x330>)
 8000304:	f000 ffe2 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2108      	movs	r1, #8
 800030c:	485b      	ldr	r0, [pc, #364]	; (800047c <display_1+0x330>)
 800030e:	f000 ffdd 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2110      	movs	r1, #16
 8000316:	4859      	ldr	r0, [pc, #356]	; (800047c <display_1+0x330>)
 8000318:	f000 ffd8 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2120      	movs	r1, #32
 8000320:	4856      	ldr	r0, [pc, #344]	; (800047c <display_1+0x330>)
 8000322:	f000 ffd3 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	4854      	ldr	r0, [pc, #336]	; (800047c <display_1+0x330>)
 800032c:	f000 ffce 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	4851      	ldr	r0, [pc, #324]	; (800047c <display_1+0x330>)
 8000336:	f000 ffc9 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	484e      	ldr	r0, [pc, #312]	; (800047c <display_1+0x330>)
 8000342:	f000 ffc3 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 8000346:	e094      	b.n	8000472 <display_1+0x326>
		case 6:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2104      	movs	r1, #4
 800034c:	484b      	ldr	r0, [pc, #300]	; (800047c <display_1+0x330>)
 800034e:	f000 ffbd 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2108      	movs	r1, #8
 8000356:	4849      	ldr	r0, [pc, #292]	; (800047c <display_1+0x330>)
 8000358:	f000 ffb8 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2110      	movs	r1, #16
 8000360:	4846      	ldr	r0, [pc, #280]	; (800047c <display_1+0x330>)
 8000362:	f000 ffb3 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2120      	movs	r1, #32
 800036a:	4844      	ldr	r0, [pc, #272]	; (800047c <display_1+0x330>)
 800036c:	f000 ffae 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	4841      	ldr	r0, [pc, #260]	; (800047c <display_1+0x330>)
 8000376:	f000 ffa9 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	483f      	ldr	r0, [pc, #252]	; (800047c <display_1+0x330>)
 8000380:	f000 ffa4 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038a:	483c      	ldr	r0, [pc, #240]	; (800047c <display_1+0x330>)
 800038c:	f000 ff9e 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 8000390:	e06f      	b.n	8000472 <display_1+0x326>
		case 7:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2104      	movs	r1, #4
 8000396:	4839      	ldr	r0, [pc, #228]	; (800047c <display_1+0x330>)
 8000398:	f000 ff98 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2108      	movs	r1, #8
 80003a0:	4836      	ldr	r0, [pc, #216]	; (800047c <display_1+0x330>)
 80003a2:	f000 ff93 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2110      	movs	r1, #16
 80003aa:	4834      	ldr	r0, [pc, #208]	; (800047c <display_1+0x330>)
 80003ac:	f000 ff8e 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2120      	movs	r1, #32
 80003b4:	4831      	ldr	r0, [pc, #196]	; (800047c <display_1+0x330>)
 80003b6:	f000 ff89 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2140      	movs	r1, #64	; 0x40
 80003be:	482f      	ldr	r0, [pc, #188]	; (800047c <display_1+0x330>)
 80003c0:	f000 ff84 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2180      	movs	r1, #128	; 0x80
 80003c8:	482c      	ldr	r0, [pc, #176]	; (800047c <display_1+0x330>)
 80003ca:	f000 ff7f 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d4:	4829      	ldr	r0, [pc, #164]	; (800047c <display_1+0x330>)
 80003d6:	f000 ff79 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 80003da:	e04a      	b.n	8000472 <display_1+0x326>
		case 8:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2104      	movs	r1, #4
 80003e0:	4826      	ldr	r0, [pc, #152]	; (800047c <display_1+0x330>)
 80003e2:	f000 ff73 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2108      	movs	r1, #8
 80003ea:	4824      	ldr	r0, [pc, #144]	; (800047c <display_1+0x330>)
 80003ec:	f000 ff6e 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2110      	movs	r1, #16
 80003f4:	4821      	ldr	r0, [pc, #132]	; (800047c <display_1+0x330>)
 80003f6:	f000 ff69 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2120      	movs	r1, #32
 80003fe:	481f      	ldr	r0, [pc, #124]	; (800047c <display_1+0x330>)
 8000400:	f000 ff64 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	481c      	ldr	r0, [pc, #112]	; (800047c <display_1+0x330>)
 800040a:	f000 ff5f 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	481a      	ldr	r0, [pc, #104]	; (800047c <display_1+0x330>)
 8000414:	f000 ff5a 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041e:	4817      	ldr	r0, [pc, #92]	; (800047c <display_1+0x330>)
 8000420:	f000 ff54 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 8000424:	e025      	b.n	8000472 <display_1+0x326>
		case 9:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2104      	movs	r1, #4
 800042a:	4814      	ldr	r0, [pc, #80]	; (800047c <display_1+0x330>)
 800042c:	f000 ff4e 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2108      	movs	r1, #8
 8000434:	4811      	ldr	r0, [pc, #68]	; (800047c <display_1+0x330>)
 8000436:	f000 ff49 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2110      	movs	r1, #16
 800043e:	480f      	ldr	r0, [pc, #60]	; (800047c <display_1+0x330>)
 8000440:	f000 ff44 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2120      	movs	r1, #32
 8000448:	480c      	ldr	r0, [pc, #48]	; (800047c <display_1+0x330>)
 800044a:	f000 ff3f 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	480a      	ldr	r0, [pc, #40]	; (800047c <display_1+0x330>)
 8000454:	f000 ff3a 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2180      	movs	r1, #128	; 0x80
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <display_1+0x330>)
 800045e:	f000 ff35 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <display_1+0x330>)
 800046a:	f000 ff2f 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 800046e:	e000      	b.n	8000472 <display_1+0x326>
		default:
				  break;
 8000470:	bf00      	nop
	}
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40010c00 	.word	0x40010c00

08000480 <display_2>:
void display_2(int num)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	switch(num)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b09      	cmp	r3, #9
 800048c:	f200 81c8 	bhi.w	8000820 <display_2+0x3a0>
 8000490:	a201      	add	r2, pc, #4	; (adr r2, 8000498 <display_2+0x18>)
 8000492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000496:	bf00      	nop
 8000498:	080004c1 	.word	0x080004c1
 800049c:	08000517 	.word	0x08000517
 80004a0:	0800056d 	.word	0x0800056d
 80004a4:	080005c3 	.word	0x080005c3
 80004a8:	08000619 	.word	0x08000619
 80004ac:	0800066f 	.word	0x0800066f
 80004b0:	080006c5 	.word	0x080006c5
 80004b4:	0800071b 	.word	0x0800071b
 80004b8:	08000771 	.word	0x08000771
 80004bc:	080007c7 	.word	0x080007c7
	{
		case 0:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	48d5      	ldr	r0, [pc, #852]	; (800081c <display_2+0x39c>)
 80004c8:	f000 ff00 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d2:	48d2      	ldr	r0, [pc, #840]	; (800081c <display_2+0x39c>)
 80004d4:	f000 fefa 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004de:	48cf      	ldr	r0, [pc, #828]	; (800081c <display_2+0x39c>)
 80004e0:	f000 fef4 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ea:	48cc      	ldr	r0, [pc, #816]	; (800081c <display_2+0x39c>)
 80004ec:	f000 feee 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	48c9      	ldr	r0, [pc, #804]	; (800081c <display_2+0x39c>)
 80004f8:	f000 fee8 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	48c6      	ldr	r0, [pc, #792]	; (800081c <display_2+0x39c>)
 8000504:	f000 fee2 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050e:	48c3      	ldr	r0, [pc, #780]	; (800081c <display_2+0x39c>)
 8000510:	f000 fedc 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 8000514:	e185      	b.n	8000822 <display_2+0x3a2>
		case 1:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	48bf      	ldr	r0, [pc, #764]	; (800081c <display_2+0x39c>)
 800051e:	f000 fed5 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000528:	48bc      	ldr	r0, [pc, #752]	; (800081c <display_2+0x39c>)
 800052a:	f000 fecf 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000534:	48b9      	ldr	r0, [pc, #740]	; (800081c <display_2+0x39c>)
 8000536:	f000 fec9 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	48b6      	ldr	r0, [pc, #728]	; (800081c <display_2+0x39c>)
 8000542:	f000 fec3 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	48b3      	ldr	r0, [pc, #716]	; (800081c <display_2+0x39c>)
 800054e:	f000 febd 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	48b0      	ldr	r0, [pc, #704]	; (800081c <display_2+0x39c>)
 800055a:	f000 feb7 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000564:	48ad      	ldr	r0, [pc, #692]	; (800081c <display_2+0x39c>)
 8000566:	f000 feb1 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 800056a:	e15a      	b.n	8000822 <display_2+0x3a2>
		case 2:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000572:	48aa      	ldr	r0, [pc, #680]	; (800081c <display_2+0x39c>)
 8000574:	f000 feaa 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057e:	48a7      	ldr	r0, [pc, #668]	; (800081c <display_2+0x39c>)
 8000580:	f000 fea4 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058a:	48a4      	ldr	r0, [pc, #656]	; (800081c <display_2+0x39c>)
 800058c:	f000 fe9e 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000596:	48a1      	ldr	r0, [pc, #644]	; (800081c <display_2+0x39c>)
 8000598:	f000 fe98 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	489e      	ldr	r0, [pc, #632]	; (800081c <display_2+0x39c>)
 80005a4:	f000 fe92 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ae:	489b      	ldr	r0, [pc, #620]	; (800081c <display_2+0x39c>)
 80005b0:	f000 fe8c 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ba:	4898      	ldr	r0, [pc, #608]	; (800081c <display_2+0x39c>)
 80005bc:	f000 fe86 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 80005c0:	e12f      	b.n	8000822 <display_2+0x3a2>
		case 3:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4894      	ldr	r0, [pc, #592]	; (800081c <display_2+0x39c>)
 80005ca:	f000 fe7f 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	4891      	ldr	r0, [pc, #580]	; (800081c <display_2+0x39c>)
 80005d6:	f000 fe79 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e0:	488e      	ldr	r0, [pc, #568]	; (800081c <display_2+0x39c>)
 80005e2:	f000 fe73 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	488b      	ldr	r0, [pc, #556]	; (800081c <display_2+0x39c>)
 80005ee:	f000 fe6d 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4888      	ldr	r0, [pc, #544]	; (800081c <display_2+0x39c>)
 80005fa:	f000 fe67 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000604:	4885      	ldr	r0, [pc, #532]	; (800081c <display_2+0x39c>)
 8000606:	f000 fe61 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000610:	4882      	ldr	r0, [pc, #520]	; (800081c <display_2+0x39c>)
 8000612:	f000 fe5b 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 8000616:	e104      	b.n	8000822 <display_2+0x3a2>
		case 4:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061e:	487f      	ldr	r0, [pc, #508]	; (800081c <display_2+0x39c>)
 8000620:	f000 fe54 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062a:	487c      	ldr	r0, [pc, #496]	; (800081c <display_2+0x39c>)
 800062c:	f000 fe4e 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000636:	4879      	ldr	r0, [pc, #484]	; (800081c <display_2+0x39c>)
 8000638:	f000 fe48 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000642:	4876      	ldr	r0, [pc, #472]	; (800081c <display_2+0x39c>)
 8000644:	f000 fe42 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4873      	ldr	r0, [pc, #460]	; (800081c <display_2+0x39c>)
 8000650:	f000 fe3c 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065a:	4870      	ldr	r0, [pc, #448]	; (800081c <display_2+0x39c>)
 800065c:	f000 fe36 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000666:	486d      	ldr	r0, [pc, #436]	; (800081c <display_2+0x39c>)
 8000668:	f000 fe30 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 800066c:	e0d9      	b.n	8000822 <display_2+0x3a2>
		case 5:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000674:	4869      	ldr	r0, [pc, #420]	; (800081c <display_2+0x39c>)
 8000676:	f000 fe29 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000680:	4866      	ldr	r0, [pc, #408]	; (800081c <display_2+0x39c>)
 8000682:	f000 fe23 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068c:	4863      	ldr	r0, [pc, #396]	; (800081c <display_2+0x39c>)
 800068e:	f000 fe1d 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000698:	4860      	ldr	r0, [pc, #384]	; (800081c <display_2+0x39c>)
 800069a:	f000 fe17 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a4:	485d      	ldr	r0, [pc, #372]	; (800081c <display_2+0x39c>)
 80006a6:	f000 fe11 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	485a      	ldr	r0, [pc, #360]	; (800081c <display_2+0x39c>)
 80006b2:	f000 fe0b 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006bc:	4857      	ldr	r0, [pc, #348]	; (800081c <display_2+0x39c>)
 80006be:	f000 fe05 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 80006c2:	e0ae      	b.n	8000822 <display_2+0x3a2>
		case 6:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ca:	4854      	ldr	r0, [pc, #336]	; (800081c <display_2+0x39c>)
 80006cc:	f000 fdfe 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	4851      	ldr	r0, [pc, #324]	; (800081c <display_2+0x39c>)
 80006d8:	f000 fdf8 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e2:	484e      	ldr	r0, [pc, #312]	; (800081c <display_2+0x39c>)
 80006e4:	f000 fdf2 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ee:	484b      	ldr	r0, [pc, #300]	; (800081c <display_2+0x39c>)
 80006f0:	f000 fdec 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	4848      	ldr	r0, [pc, #288]	; (800081c <display_2+0x39c>)
 80006fc:	f000 fde6 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000706:	4845      	ldr	r0, [pc, #276]	; (800081c <display_2+0x39c>)
 8000708:	f000 fde0 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000712:	4842      	ldr	r0, [pc, #264]	; (800081c <display_2+0x39c>)
 8000714:	f000 fdda 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 8000718:	e083      	b.n	8000822 <display_2+0x3a2>
		case 7:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000720:	483e      	ldr	r0, [pc, #248]	; (800081c <display_2+0x39c>)
 8000722:	f000 fdd3 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072c:	483b      	ldr	r0, [pc, #236]	; (800081c <display_2+0x39c>)
 800072e:	f000 fdcd 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	4838      	ldr	r0, [pc, #224]	; (800081c <display_2+0x39c>)
 800073a:	f000 fdc7 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000744:	4835      	ldr	r0, [pc, #212]	; (800081c <display_2+0x39c>)
 8000746:	f000 fdc1 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000750:	4832      	ldr	r0, [pc, #200]	; (800081c <display_2+0x39c>)
 8000752:	f000 fdbb 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075c:	482f      	ldr	r0, [pc, #188]	; (800081c <display_2+0x39c>)
 800075e:	f000 fdb5 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000768:	482c      	ldr	r0, [pc, #176]	; (800081c <display_2+0x39c>)
 800076a:	f000 fdaf 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 800076e:	e058      	b.n	8000822 <display_2+0x3a2>
		case 8:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000776:	4829      	ldr	r0, [pc, #164]	; (800081c <display_2+0x39c>)
 8000778:	f000 fda8 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	4826      	ldr	r0, [pc, #152]	; (800081c <display_2+0x39c>)
 8000784:	f000 fda2 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078e:	4823      	ldr	r0, [pc, #140]	; (800081c <display_2+0x39c>)
 8000790:	f000 fd9c 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079a:	4820      	ldr	r0, [pc, #128]	; (800081c <display_2+0x39c>)
 800079c:	f000 fd96 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	481d      	ldr	r0, [pc, #116]	; (800081c <display_2+0x39c>)
 80007a8:	f000 fd90 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b2:	481a      	ldr	r0, [pc, #104]	; (800081c <display_2+0x39c>)
 80007b4:	f000 fd8a 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007be:	4817      	ldr	r0, [pc, #92]	; (800081c <display_2+0x39c>)
 80007c0:	f000 fd84 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 80007c4:	e02d      	b.n	8000822 <display_2+0x3a2>
		case 9:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <display_2+0x39c>)
 80007ce:	f000 fd7d 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d8:	4810      	ldr	r0, [pc, #64]	; (800081c <display_2+0x39c>)
 80007da:	f000 fd77 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <display_2+0x39c>)
 80007e6:	f000 fd71 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <display_2+0x39c>)
 80007f2:	f000 fd6b 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <display_2+0x39c>)
 80007fe:	f000 fd65 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <display_2+0x39c>)
 800080a:	f000 fd5f 	bl	80012cc <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000814:	4801      	ldr	r0, [pc, #4]	; (800081c <display_2+0x39c>)
 8000816:	f000 fd59 	bl	80012cc <HAL_GPIO_WritePin>
				  break;
 800081a:	e002      	b.n	8000822 <display_2+0x3a2>
 800081c:	40010c00 	.word	0x40010c00
		default:
				  break;
 8000820:	bf00      	nop
	}
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fa60 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f824 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f8aa 	bl	8000990 <MX_GPIO_Init>
  MX_TIM2_Init();
 800083c:	f000 f85c 	bl	80008f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <main+0x4c>)
 8000842:	f001 f989 	bl	8001b58 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <main+0x50>)
 800084e:	f000 fd3d 	bl	80012cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <main+0x50>)
 800085a:	f000 fd37 	bl	80012cc <HAL_GPIO_WritePin>
	light_1(red);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f996 	bl	8000b90 <light_1>
	light_2(yellow);
 8000864:	2002      	movs	r0, #2
 8000866:	f000 f9d9 	bl	8000c1c <light_2>
	display_1(6);
 800086a:	2006      	movs	r0, #6
 800086c:	f7ff fc6e 	bl	800014c <display_1>
	display_2(5);
 8000870:	2005      	movs	r0, #5
 8000872:	f7ff fe05 	bl	8000480 <display_2>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000876:	e7e6      	b.n	8000846 <main+0x1a>
 8000878:	20000028 	.word	0x20000028
 800087c:	40010800 	.word	0x40010800

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b090      	sub	sp, #64	; 0x40
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	2228      	movs	r2, #40	; 0x28
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fcee 	bl	8002270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a6:	2301      	movs	r3, #1
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008aa:	2310      	movs	r3, #16
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fd20 	bl	80012fc <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008c2:	f000 f8d2 	bl	8000a6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 ff8e 	bl	8001800 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f8be 	bl	8000a6a <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3740      	adds	r7, #64	; 0x40
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_TIM2_Init+0x94>)
 8000916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_TIM2_Init+0x94>)
 800091e:	f240 321f 	movw	r2, #799	; 0x31f
 8000922:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_TIM2_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_TIM2_Init+0x94>)
 800092c:	2209      	movs	r2, #9
 800092e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_TIM2_Init+0x94>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_TIM2_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <MX_TIM2_Init+0x94>)
 800093e:	f001 f8bb 	bl	8001ab8 <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000948:	f000 f88f 	bl	8000a6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	4619      	mov	r1, r3
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <MX_TIM2_Init+0x94>)
 800095a:	f001 fa39 	bl	8001dd0 <HAL_TIM_ConfigClockSource>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000964:	f000 f881 	bl	8000a6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_TIM2_Init+0x94>)
 8000976:	f001 fc11 	bl	800219c <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000980:	f000 f873 	bl	8000a6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000028 	.word	0x20000028

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_GPIO_Init+0xbc>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <MX_GPIO_Init+0xbc>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_GPIO_Init+0xbc>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_GPIO_Init+0xbc>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <MX_GPIO_Init+0xbc>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_GPIO_Init+0xbc>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin|GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin
 80009d4:	2200      	movs	r2, #0
 80009d6:	f640 71fe 	movw	r1, #4094	; 0xffe
 80009da:	481d      	ldr	r0, [pc, #116]	; (8000a50 <MX_GPIO_Init+0xc0>)
 80009dc:	f000 fc76 	bl	80012cc <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN3A11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG11_Pin|SEG12_Pin|SEG13_Pin
 80009e0:	2200      	movs	r2, #0
 80009e2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80009e6:	481b      	ldr	r0, [pc, #108]	; (8000a54 <MX_GPIO_Init+0xc4>)
 80009e8:	f000 fc70 	bl	80012cc <HAL_GPIO_WritePin>
                          |SEG6_Pin|SEG10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_TEST_Pin GREEN_1_Pin YELLOW_1_Pin RED_1_Pin
                           GREEN_2_Pin YELLOW_2_Pin RED_2_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN3A11_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin
 80009ec:	f640 73fe 	movw	r3, #4094	; 0xffe
 80009f0:	60bb      	str	r3, [r7, #8]
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN3A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2302      	movs	r3, #2
 80009fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4619      	mov	r1, r3
 8000a04:	4812      	ldr	r0, [pc, #72]	; (8000a50 <MX_GPIO_Init+0xc0>)
 8000a06:	f000 fae5 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG11_Pin SEG12_Pin SEG13_Pin
                           SEG14_Pin SEG15_Pin SEG16_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG11_Pin|SEG12_Pin|SEG13_Pin
 8000a0a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000a0e:	60bb      	str	r3, [r7, #8]
                          |SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4619      	mov	r1, r3
 8000a22:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_GPIO_Init+0xc4>)
 8000a24:	f000 fad6 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000a28:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_GPIO_Init+0xc0>)
 8000a3e:	f000 fac9 	bl	8000fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6e:	b672      	cpsid	i
}
 8000a70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x5c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_MspInit+0x60>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_MspInit+0x60>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ae8:	d113      	bne.n	8000b12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_TIM_Base_MspInit+0x44>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <HAL_TIM_Base_MspInit+0x44>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_TIM_Base_MspInit+0x44>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	201c      	movs	r0, #28
 8000b08:	f000 fa2d 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b0c:	201c      	movs	r0, #28
 8000b0e:	f000 fa46 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 f90b 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM2_IRQHandler+0x10>)
 8000b76:	f001 f83b 	bl	8001bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000028 	.word	0x20000028

08000b84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <light_1>:
 *      Author: Admin
 */
#include "traffic_light.h"

void light_1(enum led color)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d026      	beq.n	8000bee <light_1+0x5e>
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	dc34      	bgt.n	8000c0e <light_1+0x7e>
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <light_1+0x1e>
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d010      	beq.n	8000bce <light_1+0x3e>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 8000bac:	e02f      	b.n	8000c0e <light_1+0x7e>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	4819      	ldr	r0, [pc, #100]	; (8000c18 <light_1+0x88>)
 8000bb4:	f000 fb8a 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4816      	ldr	r0, [pc, #88]	; (8000c18 <light_1+0x88>)
 8000bbe:	f000 fb85 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	4814      	ldr	r0, [pc, #80]	; (8000c18 <light_1+0x88>)
 8000bc8:	f000 fb80 	bl	80012cc <HAL_GPIO_WritePin>
			break;
 8000bcc:	e020      	b.n	8000c10 <light_1+0x80>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	4811      	ldr	r0, [pc, #68]	; (8000c18 <light_1+0x88>)
 8000bd4:	f000 fb7a 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2104      	movs	r1, #4
 8000bdc:	480e      	ldr	r0, [pc, #56]	; (8000c18 <light_1+0x88>)
 8000bde:	f000 fb75 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2108      	movs	r1, #8
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <light_1+0x88>)
 8000be8:	f000 fb70 	bl	80012cc <HAL_GPIO_WritePin>
			break;
 8000bec:	e010      	b.n	8000c10 <light_1+0x80>
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <light_1+0x88>)
 8000bf4:	f000 fb6a 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	4806      	ldr	r0, [pc, #24]	; (8000c18 <light_1+0x88>)
 8000bfe:	f000 fb65 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <light_1+0x88>)
 8000c08:	f000 fb60 	bl	80012cc <HAL_GPIO_WritePin>
			break;
 8000c0c:	e000      	b.n	8000c10 <light_1+0x80>
			break;
 8000c0e:	bf00      	nop
	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010800 	.word	0x40010800

08000c1c <light_2>:
void light_2(enum led color)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d026      	beq.n	8000c7a <light_2+0x5e>
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	dc34      	bgt.n	8000c9a <light_2+0x7e>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <light_2+0x1e>
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d010      	beq.n	8000c5a <light_2+0x3e>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 8000c38:	e02f      	b.n	8000c9a <light_2+0x7e>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <light_2+0x88>)
 8000c40:	f000 fb44 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2120      	movs	r1, #32
 8000c48:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <light_2+0x88>)
 8000c4a:	f000 fb3f 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <light_2+0x88>)
 8000c54:	f000 fb3a 	bl	80012cc <HAL_GPIO_WritePin>
			break;
 8000c58:	e020      	b.n	8000c9c <light_2+0x80>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <light_2+0x88>)
 8000c60:	f000 fb34 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2120      	movs	r1, #32
 8000c68:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <light_2+0x88>)
 8000c6a:	f000 fb2f 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <light_2+0x88>)
 8000c74:	f000 fb2a 	bl	80012cc <HAL_GPIO_WritePin>
			break;
 8000c78:	e010      	b.n	8000c9c <light_2+0x80>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <light_2+0x88>)
 8000c80:	f000 fb24 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2120      	movs	r1, #32
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <light_2+0x88>)
 8000c8a:	f000 fb1f 	bl	80012cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2140      	movs	r1, #64	; 0x40
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <light_2+0x88>)
 8000c94:	f000 fb1a 	bl	80012cc <HAL_GPIO_WritePin>
			break;
 8000c98:	e000      	b.n	8000c9c <light_2+0x80>
			break;
 8000c9a:	bf00      	nop
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca8:	f7ff ff6c 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cae:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cc4:	4c09      	ldr	r4, [pc, #36]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f001 fad5 	bl	8002280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff fda9 	bl	800082c <main>
  bx lr
 8000cda:	4770      	bx	lr
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce4:	0800230c 	.word	0x0800230c
  ldr r2, =_sbss
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cec:	20000074 	.word	0x20000074

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x28>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x28>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f923 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff feb0 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f93b 	bl	8000fba <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f903 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x20>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <HAL_IncTick+0x20>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000070 	.word	0x20000070

08000da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_GetTick+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	20000070 	.word	0x20000070

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <__NVIC_EnableIRQ+0x34>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff90 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff2d 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff42 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff90 	bl	8000ea8 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5f 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff35 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b08b      	sub	sp, #44	; 0x2c
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe6:	e161      	b.n	80012ac <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 8150 	bne.w	80012a6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4a97      	ldr	r2, [pc, #604]	; (8001268 <HAL_GPIO_Init+0x294>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d05e      	beq.n	80010ce <HAL_GPIO_Init+0xfa>
 8001010:	4a95      	ldr	r2, [pc, #596]	; (8001268 <HAL_GPIO_Init+0x294>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d875      	bhi.n	8001102 <HAL_GPIO_Init+0x12e>
 8001016:	4a95      	ldr	r2, [pc, #596]	; (800126c <HAL_GPIO_Init+0x298>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d058      	beq.n	80010ce <HAL_GPIO_Init+0xfa>
 800101c:	4a93      	ldr	r2, [pc, #588]	; (800126c <HAL_GPIO_Init+0x298>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d86f      	bhi.n	8001102 <HAL_GPIO_Init+0x12e>
 8001022:	4a93      	ldr	r2, [pc, #588]	; (8001270 <HAL_GPIO_Init+0x29c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d052      	beq.n	80010ce <HAL_GPIO_Init+0xfa>
 8001028:	4a91      	ldr	r2, [pc, #580]	; (8001270 <HAL_GPIO_Init+0x29c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d869      	bhi.n	8001102 <HAL_GPIO_Init+0x12e>
 800102e:	4a91      	ldr	r2, [pc, #580]	; (8001274 <HAL_GPIO_Init+0x2a0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d04c      	beq.n	80010ce <HAL_GPIO_Init+0xfa>
 8001034:	4a8f      	ldr	r2, [pc, #572]	; (8001274 <HAL_GPIO_Init+0x2a0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d863      	bhi.n	8001102 <HAL_GPIO_Init+0x12e>
 800103a:	4a8f      	ldr	r2, [pc, #572]	; (8001278 <HAL_GPIO_Init+0x2a4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d046      	beq.n	80010ce <HAL_GPIO_Init+0xfa>
 8001040:	4a8d      	ldr	r2, [pc, #564]	; (8001278 <HAL_GPIO_Init+0x2a4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d85d      	bhi.n	8001102 <HAL_GPIO_Init+0x12e>
 8001046:	2b12      	cmp	r3, #18
 8001048:	d82a      	bhi.n	80010a0 <HAL_GPIO_Init+0xcc>
 800104a:	2b12      	cmp	r3, #18
 800104c:	d859      	bhi.n	8001102 <HAL_GPIO_Init+0x12e>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <HAL_GPIO_Init+0x80>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	080010cf 	.word	0x080010cf
 8001058:	080010a9 	.word	0x080010a9
 800105c:	080010bb 	.word	0x080010bb
 8001060:	080010fd 	.word	0x080010fd
 8001064:	08001103 	.word	0x08001103
 8001068:	08001103 	.word	0x08001103
 800106c:	08001103 	.word	0x08001103
 8001070:	08001103 	.word	0x08001103
 8001074:	08001103 	.word	0x08001103
 8001078:	08001103 	.word	0x08001103
 800107c:	08001103 	.word	0x08001103
 8001080:	08001103 	.word	0x08001103
 8001084:	08001103 	.word	0x08001103
 8001088:	08001103 	.word	0x08001103
 800108c:	08001103 	.word	0x08001103
 8001090:	08001103 	.word	0x08001103
 8001094:	08001103 	.word	0x08001103
 8001098:	080010b1 	.word	0x080010b1
 800109c:	080010c5 	.word	0x080010c5
 80010a0:	4a76      	ldr	r2, [pc, #472]	; (800127c <HAL_GPIO_Init+0x2a8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010a6:	e02c      	b.n	8001102 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	623b      	str	r3, [r7, #32]
          break;
 80010ae:	e029      	b.n	8001104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	3304      	adds	r3, #4
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e024      	b.n	8001104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	3308      	adds	r3, #8
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e01f      	b.n	8001104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	330c      	adds	r3, #12
 80010ca:	623b      	str	r3, [r7, #32]
          break;
 80010cc:	e01a      	b.n	8001104 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010d6:	2304      	movs	r3, #4
 80010d8:	623b      	str	r3, [r7, #32]
          break;
 80010da:	e013      	b.n	8001104 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d105      	bne.n	80010f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e4:	2308      	movs	r3, #8
 80010e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	611a      	str	r2, [r3, #16]
          break;
 80010ee:	e009      	b.n	8001104 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f0:	2308      	movs	r3, #8
 80010f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	615a      	str	r2, [r3, #20]
          break;
 80010fa:	e003      	b.n	8001104 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x130>
          break;
 8001102:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2bff      	cmp	r3, #255	; 0xff
 8001108:	d801      	bhi.n	800110e <HAL_GPIO_Init+0x13a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	e001      	b.n	8001112 <HAL_GPIO_Init+0x13e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3304      	adds	r3, #4
 8001112:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2bff      	cmp	r3, #255	; 0xff
 8001118:	d802      	bhi.n	8001120 <HAL_GPIO_Init+0x14c>
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	e002      	b.n	8001126 <HAL_GPIO_Init+0x152>
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	3b08      	subs	r3, #8
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	210f      	movs	r1, #15
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	6a39      	ldr	r1, [r7, #32]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	431a      	orrs	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80a9 	beq.w	80012a6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001154:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <HAL_GPIO_Init+0x2ac>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a49      	ldr	r2, [pc, #292]	; (8001280 <HAL_GPIO_Init+0x2ac>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_GPIO_Init+0x2ac>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800116c:	4a45      	ldr	r2, [pc, #276]	; (8001284 <HAL_GPIO_Init+0x2b0>)
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <HAL_GPIO_Init+0x2b4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d00d      	beq.n	80011b4 <HAL_GPIO_Init+0x1e0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a3c      	ldr	r2, [pc, #240]	; (800128c <HAL_GPIO_Init+0x2b8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d007      	beq.n	80011b0 <HAL_GPIO_Init+0x1dc>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <HAL_GPIO_Init+0x2bc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d101      	bne.n	80011ac <HAL_GPIO_Init+0x1d8>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e004      	b.n	80011b6 <HAL_GPIO_Init+0x1e2>
 80011ac:	2303      	movs	r3, #3
 80011ae:	e002      	b.n	80011b6 <HAL_GPIO_Init+0x1e2>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_GPIO_Init+0x1e2>
 80011b4:	2300      	movs	r3, #0
 80011b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b8:	f002 0203 	and.w	r2, r2, #3
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	4093      	lsls	r3, r2
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011c6:	492f      	ldr	r1, [pc, #188]	; (8001284 <HAL_GPIO_Init+0x2b0>)
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e0:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	492b      	ldr	r1, [pc, #172]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ee:	4b29      	ldr	r3, [pc, #164]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4927      	ldr	r1, [pc, #156]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	4921      	ldr	r1, [pc, #132]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	43db      	mvns	r3, r3
 800121e:	491d      	ldr	r1, [pc, #116]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 8001220:	4013      	ands	r3, r2
 8001222:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4917      	ldr	r1, [pc, #92]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	43db      	mvns	r3, r3
 8001246:	4913      	ldr	r1, [pc, #76]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 8001248:	4013      	ands	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01f      	beq.n	8001298 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	490d      	ldr	r1, [pc, #52]	; (8001294 <HAL_GPIO_Init+0x2c0>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e01f      	b.n	80012a6 <HAL_GPIO_Init+0x2d2>
 8001266:	bf00      	nop
 8001268:	10320000 	.word	0x10320000
 800126c:	10310000 	.word	0x10310000
 8001270:	10220000 	.word	0x10220000
 8001274:	10210000 	.word	0x10210000
 8001278:	10120000 	.word	0x10120000
 800127c:	10110000 	.word	0x10110000
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	40010800 	.word	0x40010800
 800128c:	40010c00 	.word	0x40010c00
 8001290:	40011000 	.word	0x40011000
 8001294:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_GPIO_Init+0x2f4>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	43db      	mvns	r3, r3
 80012a0:	4909      	ldr	r1, [pc, #36]	; (80012c8 <HAL_GPIO_Init+0x2f4>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	3301      	adds	r3, #1
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	fa22 f303 	lsr.w	r3, r2, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f47f ae96 	bne.w	8000fe8 <HAL_GPIO_Init+0x14>
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	372c      	adds	r7, #44	; 0x2c
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	611a      	str	r2, [r3, #16]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e272      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8087 	beq.w	800142a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800131c:	4b92      	ldr	r3, [pc, #584]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b04      	cmp	r3, #4
 8001326:	d00c      	beq.n	8001342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001328:	4b8f      	ldr	r3, [pc, #572]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b08      	cmp	r3, #8
 8001332:	d112      	bne.n	800135a <HAL_RCC_OscConfig+0x5e>
 8001334:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d10b      	bne.n	800135a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001342:	4b89      	ldr	r3, [pc, #548]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d06c      	beq.n	8001428 <HAL_RCC_OscConfig+0x12c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d168      	bne.n	8001428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e24c      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x76>
 8001364:	4b80      	ldr	r3, [pc, #512]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a7f      	ldr	r2, [pc, #508]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800136a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e02e      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x98>
 800137a:	4b7b      	ldr	r3, [pc, #492]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7a      	ldr	r2, [pc, #488]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b78      	ldr	r3, [pc, #480]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a77      	ldr	r2, [pc, #476]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e01d      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0xbc>
 800139e:	4b72      	ldr	r3, [pc, #456]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a71      	ldr	r2, [pc, #452]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b6f      	ldr	r3, [pc, #444]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6e      	ldr	r2, [pc, #440]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0xd4>
 80013b8:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a6a      	ldr	r2, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a67      	ldr	r2, [pc, #412]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fce4 	bl	8000da4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fce0 	bl	8000da4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e200      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0xe4>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fcd0 	bl	8000da4 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fccc 	bl	8000da4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1ec      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	4b53      	ldr	r3, [pc, #332]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x10c>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d063      	beq.n	80014fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001436:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001442:	4b49      	ldr	r3, [pc, #292]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d11c      	bne.n	8001488 <HAL_RCC_OscConfig+0x18c>
 800144e:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d116      	bne.n	8001488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x176>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e1c0      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4939      	ldr	r1, [pc, #228]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	e03a      	b.n	80014fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d020      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <HAL_RCC_OscConfig+0x270>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fc85 	bl	8000da4 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fc81 	bl	8000da4 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e1a1      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4927      	ldr	r1, [pc, #156]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_RCC_OscConfig+0x270>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc64 	bl	8000da4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fc60 	bl	8000da4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e180      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d03a      	beq.n	8001580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d019      	beq.n	8001546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_RCC_OscConfig+0x274>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff fc44 	bl	8000da4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fc40 	bl	8000da4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e160      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_RCC_OscConfig+0x26c>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800153e:	2001      	movs	r0, #1
 8001540:	f000 fa9c 	bl	8001a7c <RCC_Delay>
 8001544:	e01c      	b.n	8001580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_RCC_OscConfig+0x274>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff fc2a 	bl	8000da4 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001552:	e00f      	b.n	8001574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fc26 	bl	8000da4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d908      	bls.n	8001574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e146      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	42420000 	.word	0x42420000
 8001570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e9      	bne.n	8001554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a6 	beq.w	80016da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b8b      	ldr	r3, [pc, #556]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a87      	ldr	r2, [pc, #540]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b85      	ldr	r3, [pc, #532]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	4b82      	ldr	r3, [pc, #520]	; (80017c4 <HAL_RCC_OscConfig+0x4c8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d118      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c6:	4b7f      	ldr	r3, [pc, #508]	; (80017c4 <HAL_RCC_OscConfig+0x4c8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a7e      	ldr	r2, [pc, #504]	; (80017c4 <HAL_RCC_OscConfig+0x4c8>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fbe7 	bl	8000da4 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015da:	f7ff fbe3 	bl	8000da4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b64      	cmp	r3, #100	; 0x64
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e103      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	4b75      	ldr	r3, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x4c8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x312>
 8001600:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4a6e      	ldr	r2, [pc, #440]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	e02d      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x334>
 8001616:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a69      	ldr	r2, [pc, #420]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a66      	ldr	r2, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	e01c      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d10c      	bne.n	8001652 <HAL_RCC_OscConfig+0x356>
 8001638:	4b61      	ldr	r3, [pc, #388]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a60      	ldr	r2, [pc, #384]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a5d      	ldr	r2, [pc, #372]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	e00b      	b.n	800166a <HAL_RCC_OscConfig+0x36e>
 8001652:	4b5b      	ldr	r3, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a5a      	ldr	r2, [pc, #360]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4b58      	ldr	r3, [pc, #352]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff fb97 	bl	8000da4 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fb93 	bl	8000da4 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0b1      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ee      	beq.n	800167a <HAL_RCC_OscConfig+0x37e>
 800169c:	e014      	b.n	80016c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fb81 	bl	8000da4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fb7d 	bl	8000da4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e09b      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a3b      	ldr	r2, [pc, #236]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8087 	beq.w	80017f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d061      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d146      	bne.n	8001786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_RCC_OscConfig+0x4cc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb51 	bl	8000da4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fb4d 	bl	8000da4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e06d      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d108      	bne.n	8001740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4921      	ldr	r1, [pc, #132]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a19      	ldr	r1, [r3, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	430b      	orrs	r3, r1
 8001752:	491b      	ldr	r1, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x4cc>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fb21 	bl	8000da4 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fb1d 	bl	8000da4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e03d      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x46a>
 8001784:	e035      	b.n	80017f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_RCC_OscConfig+0x4cc>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fb0a 	bl	8000da4 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fb06 	bl	8000da4 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e026      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x498>
 80017b2:	e01e      	b.n	80017f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e019      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
 80017c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_OscConfig+0x500>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000

08001800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0d0      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d910      	bls.n	8001844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 0207 	bic.w	r2, r3, #7
 800182a:	4965      	ldr	r1, [pc, #404]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800187e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d040      	beq.n	8001920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d115      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e073      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e06b      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f023 0203 	bic.w	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4936      	ldr	r1, [pc, #216]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f0:	f7ff fa58 	bl	8000da4 <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	e00a      	b.n	800190e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f8:	f7ff fa54 	bl	8000da4 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e053      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 020c 	and.w	r2, r3, #12
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	429a      	cmp	r2, r3
 800191e:	d1eb      	bne.n	80018f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d210      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 0207 	bic.w	r2, r3, #7
 8001936:	4922      	ldr	r1, [pc, #136]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f821 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	490a      	ldr	r1, [pc, #40]	; (80019c8 <HAL_RCC_ClockConfig+0x1c8>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1cc>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1d0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f9b6 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40022000 	.word	0x40022000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	080022e0 	.word	0x080022e0
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x30>
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x36>
 8001a02:	e027      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a06:	613b      	str	r3, [r7, #16]
      break;
 8001a08:	e027      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0c9b      	lsrs	r3, r3, #18
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d010      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0c5b      	lsrs	r3, r3, #17
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a36:	fb03 f202 	mul.w	r2, r3, r2
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e004      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	613b      	str	r3, [r7, #16]
      break;
 8001a52:	e002      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a56:	613b      	str	r3, [r7, #16]
      break;
 8001a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5a:	693b      	ldr	r3, [r7, #16]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	007a1200 	.word	0x007a1200
 8001a70:	080022f0 	.word	0x080022f0
 8001a74:	08002300 	.word	0x08002300
 8001a78:	003d0900 	.word	0x003d0900

08001a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <RCC_Delay+0x34>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <RCC_Delay+0x38>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0a5b      	lsrs	r3, r3, #9
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a98:	bf00      	nop
  }
  while (Delay --);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	60fa      	str	r2, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f9      	bne.n	8001a98 <RCC_Delay+0x1c>
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	10624dd3 	.word	0x10624dd3

08001ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e041      	b.n	8001b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fffa 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 fa56 	bl	8001fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d001      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e035      	b.n	8001bdc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_TIM_Base_Start_IT+0x90>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d009      	beq.n	8001ba6 <HAL_TIM_Base_Start_IT+0x4e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d004      	beq.n	8001ba6 <HAL_TIM_Base_Start_IT+0x4e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_TIM_Base_Start_IT+0x94>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d111      	bne.n	8001bca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d010      	beq.n	8001bda <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc8:	e007      	b.n	8001bda <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40000400 	.word	0x40000400

08001bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d020      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0202 	mvn.w	r2, #2
 8001c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f998 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f98b 	bl	8001f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f99a 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d020      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d01b      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0204 	mvn.w	r2, #4
 8001c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2202      	movs	r2, #2
 8001c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f972 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f965 	bl	8001f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f974 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d020      	beq.n	8001cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01b      	beq.n	8001cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0208 	mvn.w	r2, #8
 8001cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f94c 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f93f 	bl	8001f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f94e 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d020      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0210 	mvn.w	r2, #16
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f926 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f919 	bl	8001f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f928 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00c      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0201 	mvn.w	r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fe7e 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fa6f 	bl	800225e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00c      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8f8 	bl	8001f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0220 	mvn.w	r2, #32
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fa42 	bl	800224c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_TIM_ConfigClockSource+0x1c>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0b4      	b.n	8001f56 <HAL_TIM_ConfigClockSource+0x186>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e24:	d03e      	beq.n	8001ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8001e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2a:	f200 8087 	bhi.w	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
 8001e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e32:	f000 8086 	beq.w	8001f42 <HAL_TIM_ConfigClockSource+0x172>
 8001e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3a:	d87f      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
 8001e3c:	2b70      	cmp	r3, #112	; 0x70
 8001e3e:	d01a      	beq.n	8001e76 <HAL_TIM_ConfigClockSource+0xa6>
 8001e40:	2b70      	cmp	r3, #112	; 0x70
 8001e42:	d87b      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
 8001e44:	2b60      	cmp	r3, #96	; 0x60
 8001e46:	d050      	beq.n	8001eea <HAL_TIM_ConfigClockSource+0x11a>
 8001e48:	2b60      	cmp	r3, #96	; 0x60
 8001e4a:	d877      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
 8001e4c:	2b50      	cmp	r3, #80	; 0x50
 8001e4e:	d03c      	beq.n	8001eca <HAL_TIM_ConfigClockSource+0xfa>
 8001e50:	2b50      	cmp	r3, #80	; 0x50
 8001e52:	d873      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
 8001e54:	2b40      	cmp	r3, #64	; 0x40
 8001e56:	d058      	beq.n	8001f0a <HAL_TIM_ConfigClockSource+0x13a>
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d86f      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
 8001e5c:	2b30      	cmp	r3, #48	; 0x30
 8001e5e:	d064      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x15a>
 8001e60:	2b30      	cmp	r3, #48	; 0x30
 8001e62:	d86b      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d060      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x15a>
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d867      	bhi.n	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05c      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x15a>
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d05a      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x15a>
 8001e74:	e062      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e86:	f000 f96a 	bl	800215e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	609a      	str	r2, [r3, #8]
      break;
 8001ea2:	e04f      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001eb4:	f000 f953 	bl	800215e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ec6:	609a      	str	r2, [r3, #8]
      break;
 8001ec8:	e03c      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f000 f8ca 	bl	8002070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2150      	movs	r1, #80	; 0x50
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f921 	bl	800212a <TIM_ITRx_SetConfig>
      break;
 8001ee8:	e02c      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f000 f8e8 	bl	80020cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2160      	movs	r1, #96	; 0x60
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f911 	bl	800212a <TIM_ITRx_SetConfig>
      break;
 8001f08:	e01c      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f16:	461a      	mov	r2, r3
 8001f18:	f000 f8aa 	bl	8002070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2140      	movs	r1, #64	; 0x40
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f901 	bl	800212a <TIM_ITRx_SetConfig>
      break;
 8001f28:	e00c      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f000 f8f8 	bl	800212a <TIM_ITRx_SetConfig>
      break;
 8001f3a:	e003      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f40:	e000      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
	...

08001fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <TIM_Base_SetConfig+0xc0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0x28>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0x28>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a28      	ldr	r2, [pc, #160]	; (800206c <TIM_Base_SetConfig+0xc4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a20      	ldr	r2, [pc, #128]	; (8002068 <TIM_Base_SetConfig+0xc0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <TIM_Base_SetConfig+0x52>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d003      	beq.n	8001ffa <TIM_Base_SetConfig+0x52>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <TIM_Base_SetConfig+0xc4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <TIM_Base_SetConfig+0xc0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d103      	bne.n	8002040 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f023 0201 	bic.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]
  }
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400

08002070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f023 0201 	bic.w	r2, r3, #1
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800209a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f023 030a 	bic.w	r3, r3, #10
 80020ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	621a      	str	r2, [r3, #32]
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	f023 0210 	bic.w	r2, r3, #16
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	031b      	lsls	r3, r3, #12
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002108:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	621a      	str	r2, [r3, #32]
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	f043 0307 	orr.w	r3, r3, #7
 800214c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800215e:	b480      	push	{r7}
 8002160:	b087      	sub	sp, #28
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002178:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	021a      	lsls	r2, r3, #8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	431a      	orrs	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4313      	orrs	r3, r2
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	609a      	str	r2, [r3, #8]
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e041      	b.n	8002238 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a14      	ldr	r2, [pc, #80]	; (8002244 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d004      	beq.n	800220c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d10c      	bne.n	8002226 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002212:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	4313      	orrs	r3, r2
 800221c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40000400 	.word	0x40000400

0800224c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <memset>:
 8002270:	4603      	mov	r3, r0
 8002272:	4402      	add	r2, r0
 8002274:	4293      	cmp	r3, r2
 8002276:	d100      	bne.n	800227a <memset+0xa>
 8002278:	4770      	bx	lr
 800227a:	f803 1b01 	strb.w	r1, [r3], #1
 800227e:	e7f9      	b.n	8002274 <memset+0x4>

08002280 <__libc_init_array>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	2600      	movs	r6, #0
 8002284:	4d0c      	ldr	r5, [pc, #48]	; (80022b8 <__libc_init_array+0x38>)
 8002286:	4c0d      	ldr	r4, [pc, #52]	; (80022bc <__libc_init_array+0x3c>)
 8002288:	1b64      	subs	r4, r4, r5
 800228a:	10a4      	asrs	r4, r4, #2
 800228c:	42a6      	cmp	r6, r4
 800228e:	d109      	bne.n	80022a4 <__libc_init_array+0x24>
 8002290:	f000 f81a 	bl	80022c8 <_init>
 8002294:	2600      	movs	r6, #0
 8002296:	4d0a      	ldr	r5, [pc, #40]	; (80022c0 <__libc_init_array+0x40>)
 8002298:	4c0a      	ldr	r4, [pc, #40]	; (80022c4 <__libc_init_array+0x44>)
 800229a:	1b64      	subs	r4, r4, r5
 800229c:	10a4      	asrs	r4, r4, #2
 800229e:	42a6      	cmp	r6, r4
 80022a0:	d105      	bne.n	80022ae <__libc_init_array+0x2e>
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a8:	4798      	blx	r3
 80022aa:	3601      	adds	r6, #1
 80022ac:	e7ee      	b.n	800228c <__libc_init_array+0xc>
 80022ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b2:	4798      	blx	r3
 80022b4:	3601      	adds	r6, #1
 80022b6:	e7f2      	b.n	800229e <__libc_init_array+0x1e>
 80022b8:	08002304 	.word	0x08002304
 80022bc:	08002304 	.word	0x08002304
 80022c0:	08002304 	.word	0x08002304
 80022c4:	08002308 	.word	0x08002308

080022c8 <_init>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr

080022d4 <_fini>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	bf00      	nop
 80022d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022da:	bc08      	pop	{r3}
 80022dc:	469e      	mov	lr, r3
 80022de:	4770      	bx	lr
