
LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a70  08002a70  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a70  08002a70  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a70  08002a70  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000002c  08002aa4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002aa4  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082db  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3b  00000000  00000000  00028373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  00029db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000799  00000000  00000000  0002a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001898  00000000  00000000  0002af51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c2d2  00000000  00000000  0002c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082591  00000000  00000000  00038abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027bc  00000000  00000000  000bb04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000bd808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a34 	.word	0x08002a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002a34 	.word	0x08002a34

0800014c <display7seg>:
int time_yellow_copy = 0;
int led7_1 = 0;          // 2 bien nay de switch giua 2 con led7
int led7_2 = 0;

void display7seg()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(status == AUTO_RED_GREEN)
 8000150:	4bb8      	ldr	r3, [pc, #736]	; (8000434 <display7seg+0x2e8>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d174      	bne.n	8000242 <display7seg+0xf6>
	{
		switch(led7_1){
 8000158:	4bb7      	ldr	r3, [pc, #732]	; (8000438 <display7seg+0x2ec>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <display7seg+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d032      	beq.n	80001ca <display7seg+0x7e>
				led7_1 = 0;
				break;

		}
	}
}
 8000164:	e1e2      	b.n	800052c <display7seg+0x3e0>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016c:	48b3      	ldr	r0, [pc, #716]	; (800043c <display7seg+0x2f0>)
 800016e:	f001 fc63 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000178:	48b0      	ldr	r0, [pc, #704]	; (800043c <display7seg+0x2f0>)
 800017a:	f001 fc5d 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000184:	48ad      	ldr	r0, [pc, #692]	; (800043c <display7seg+0x2f0>)
 8000186:	f001 fc57 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800018a:	2201      	movs	r2, #1
 800018c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000190:	48aa      	ldr	r0, [pc, #680]	; (800043c <display7seg+0x2f0>)
 8000192:	f001 fc51 	bl	8001a38 <HAL_GPIO_WritePin>
				display_2(time_red_copy / 10);
 8000196:	4baa      	ldr	r3, [pc, #680]	; (8000440 <display7seg+0x2f4>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4aaa      	ldr	r2, [pc, #680]	; (8000444 <display7seg+0x2f8>)
 800019c:	fb82 1203 	smull	r1, r2, r2, r3
 80001a0:	1092      	asrs	r2, r2, #2
 80001a2:	17db      	asrs	r3, r3, #31
 80001a4:	1ad3      	subs	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fc72 	bl	8000a90 <display_2>
				display_1(time_green_copy / 10);
 80001ac:	4ba6      	ldr	r3, [pc, #664]	; (8000448 <display7seg+0x2fc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4aa4      	ldr	r2, [pc, #656]	; (8000444 <display7seg+0x2f8>)
 80001b2:	fb82 1203 	smull	r1, r2, r2, r3
 80001b6:	1092      	asrs	r2, r2, #2
 80001b8:	17db      	asrs	r3, r3, #31
 80001ba:	1ad3      	subs	r3, r2, r3
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 facd 	bl	800075c <display_1>
				led7_1 = 1;
 80001c2:	4b9d      	ldr	r3, [pc, #628]	; (8000438 <display7seg+0x2ec>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	601a      	str	r2, [r3, #0]
				break;
 80001c8:	e1b0      	b.n	800052c <display7seg+0x3e0>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80001ca:	2201      	movs	r2, #1
 80001cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d0:	489a      	ldr	r0, [pc, #616]	; (800043c <display7seg+0x2f0>)
 80001d2:	f001 fc31 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001dc:	4897      	ldr	r0, [pc, #604]	; (800043c <display7seg+0x2f0>)
 80001de:	f001 fc2b 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e8:	4894      	ldr	r0, [pc, #592]	; (800043c <display7seg+0x2f0>)
 80001ea:	f001 fc25 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f4:	4891      	ldr	r0, [pc, #580]	; (800043c <display7seg+0x2f0>)
 80001f6:	f001 fc1f 	bl	8001a38 <HAL_GPIO_WritePin>
				display_2(time_red_copy % 10);
 80001fa:	4b91      	ldr	r3, [pc, #580]	; (8000440 <display7seg+0x2f4>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b91      	ldr	r3, [pc, #580]	; (8000444 <display7seg+0x2f8>)
 8000200:	fb83 1302 	smull	r1, r3, r3, r2
 8000204:	1099      	asrs	r1, r3, #2
 8000206:	17d3      	asrs	r3, r2, #31
 8000208:	1ac9      	subs	r1, r1, r3
 800020a:	460b      	mov	r3, r1
 800020c:	009b      	lsls	r3, r3, #2
 800020e:	440b      	add	r3, r1
 8000210:	005b      	lsls	r3, r3, #1
 8000212:	1ad1      	subs	r1, r2, r3
 8000214:	4608      	mov	r0, r1
 8000216:	f000 fc3b 	bl	8000a90 <display_2>
				display_1(time_green_copy % 10);
 800021a:	4b8b      	ldr	r3, [pc, #556]	; (8000448 <display7seg+0x2fc>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b89      	ldr	r3, [pc, #548]	; (8000444 <display7seg+0x2f8>)
 8000220:	fb83 1302 	smull	r1, r3, r3, r2
 8000224:	1099      	asrs	r1, r3, #2
 8000226:	17d3      	asrs	r3, r2, #31
 8000228:	1ac9      	subs	r1, r1, r3
 800022a:	460b      	mov	r3, r1
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	440b      	add	r3, r1
 8000230:	005b      	lsls	r3, r3, #1
 8000232:	1ad1      	subs	r1, r2, r3
 8000234:	4608      	mov	r0, r1
 8000236:	f000 fa91 	bl	800075c <display_1>
				led7_1 = 0;
 800023a:	4b7f      	ldr	r3, [pc, #508]	; (8000438 <display7seg+0x2ec>)
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
				break;
 8000240:	e174      	b.n	800052c <display7seg+0x3e0>
	else if(status == AUTO_RED_YELLOW)
 8000242:	4b7c      	ldr	r3, [pc, #496]	; (8000434 <display7seg+0x2e8>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d174      	bne.n	8000334 <display7seg+0x1e8>
		switch(led7_1){
 800024a:	4b7b      	ldr	r3, [pc, #492]	; (8000438 <display7seg+0x2ec>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d002      	beq.n	8000258 <display7seg+0x10c>
 8000252:	2b01      	cmp	r3, #1
 8000254:	d032      	beq.n	80002bc <display7seg+0x170>
}
 8000256:	e169      	b.n	800052c <display7seg+0x3e0>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025e:	4877      	ldr	r0, [pc, #476]	; (800043c <display7seg+0x2f0>)
 8000260:	f001 fbea 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026a:	4874      	ldr	r0, [pc, #464]	; (800043c <display7seg+0x2f0>)
 800026c:	f001 fbe4 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000276:	4871      	ldr	r0, [pc, #452]	; (800043c <display7seg+0x2f0>)
 8000278:	f001 fbde 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000282:	486e      	ldr	r0, [pc, #440]	; (800043c <display7seg+0x2f0>)
 8000284:	f001 fbd8 	bl	8001a38 <HAL_GPIO_WritePin>
				display_2(time_red_copy / 10);
 8000288:	4b6d      	ldr	r3, [pc, #436]	; (8000440 <display7seg+0x2f4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a6d      	ldr	r2, [pc, #436]	; (8000444 <display7seg+0x2f8>)
 800028e:	fb82 1203 	smull	r1, r2, r2, r3
 8000292:	1092      	asrs	r2, r2, #2
 8000294:	17db      	asrs	r3, r3, #31
 8000296:	1ad3      	subs	r3, r2, r3
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fbf9 	bl	8000a90 <display_2>
				display_1(time_yellow_copy / 10);
 800029e:	4b6b      	ldr	r3, [pc, #428]	; (800044c <display7seg+0x300>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a68      	ldr	r2, [pc, #416]	; (8000444 <display7seg+0x2f8>)
 80002a4:	fb82 1203 	smull	r1, r2, r2, r3
 80002a8:	1092      	asrs	r2, r2, #2
 80002aa:	17db      	asrs	r3, r3, #31
 80002ac:	1ad3      	subs	r3, r2, r3
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fa54 	bl	800075c <display_1>
				led7_1 = 1;
 80002b4:	4b60      	ldr	r3, [pc, #384]	; (8000438 <display7seg+0x2ec>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
				break;
 80002ba:	e137      	b.n	800052c <display7seg+0x3e0>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c2:	485e      	ldr	r0, [pc, #376]	; (800043c <display7seg+0x2f0>)
 80002c4:	f001 fbb8 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ce:	485b      	ldr	r0, [pc, #364]	; (800043c <display7seg+0x2f0>)
 80002d0:	f001 fbb2 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002da:	4858      	ldr	r0, [pc, #352]	; (800043c <display7seg+0x2f0>)
 80002dc:	f001 fbac 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e6:	4855      	ldr	r0, [pc, #340]	; (800043c <display7seg+0x2f0>)
 80002e8:	f001 fba6 	bl	8001a38 <HAL_GPIO_WritePin>
				display_2(time_red_copy % 10);
 80002ec:	4b54      	ldr	r3, [pc, #336]	; (8000440 <display7seg+0x2f4>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4b54      	ldr	r3, [pc, #336]	; (8000444 <display7seg+0x2f8>)
 80002f2:	fb83 1302 	smull	r1, r3, r3, r2
 80002f6:	1099      	asrs	r1, r3, #2
 80002f8:	17d3      	asrs	r3, r2, #31
 80002fa:	1ac9      	subs	r1, r1, r3
 80002fc:	460b      	mov	r3, r1
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	440b      	add	r3, r1
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	1ad1      	subs	r1, r2, r3
 8000306:	4608      	mov	r0, r1
 8000308:	f000 fbc2 	bl	8000a90 <display_2>
				display_1(time_yellow_copy % 10);
 800030c:	4b4f      	ldr	r3, [pc, #316]	; (800044c <display7seg+0x300>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b4c      	ldr	r3, [pc, #304]	; (8000444 <display7seg+0x2f8>)
 8000312:	fb83 1302 	smull	r1, r3, r3, r2
 8000316:	1099      	asrs	r1, r3, #2
 8000318:	17d3      	asrs	r3, r2, #31
 800031a:	1ac9      	subs	r1, r1, r3
 800031c:	460b      	mov	r3, r1
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	440b      	add	r3, r1
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	1ad1      	subs	r1, r2, r3
 8000326:	4608      	mov	r0, r1
 8000328:	f000 fa18 	bl	800075c <display_1>
				led7_1 = 0;
 800032c:	4b42      	ldr	r3, [pc, #264]	; (8000438 <display7seg+0x2ec>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
				break;
 8000332:	e0fb      	b.n	800052c <display7seg+0x3e0>
	else if(status == AUTO_GREEN_RED)
 8000334:	4b3f      	ldr	r3, [pc, #252]	; (8000434 <display7seg+0x2e8>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d174      	bne.n	8000426 <display7seg+0x2da>
		switch(led7_1){
 800033c:	4b3e      	ldr	r3, [pc, #248]	; (8000438 <display7seg+0x2ec>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <display7seg+0x1fe>
 8000344:	2b01      	cmp	r3, #1
 8000346:	d032      	beq.n	80003ae <display7seg+0x262>
}
 8000348:	e0f0      	b.n	800052c <display7seg+0x3e0>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	483a      	ldr	r0, [pc, #232]	; (800043c <display7seg+0x2f0>)
 8000352:	f001 fb71 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800035c:	4837      	ldr	r0, [pc, #220]	; (800043c <display7seg+0x2f0>)
 800035e:	f001 fb6b 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000368:	4834      	ldr	r0, [pc, #208]	; (800043c <display7seg+0x2f0>)
 800036a:	f001 fb65 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000374:	4831      	ldr	r0, [pc, #196]	; (800043c <display7seg+0x2f0>)
 8000376:	f001 fb5f 	bl	8001a38 <HAL_GPIO_WritePin>
				display_2(time_green_copy / 10);
 800037a:	4b33      	ldr	r3, [pc, #204]	; (8000448 <display7seg+0x2fc>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a31      	ldr	r2, [pc, #196]	; (8000444 <display7seg+0x2f8>)
 8000380:	fb82 1203 	smull	r1, r2, r2, r3
 8000384:	1092      	asrs	r2, r2, #2
 8000386:	17db      	asrs	r3, r3, #31
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fb80 	bl	8000a90 <display_2>
				display_1(time_red_copy / 10);
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <display7seg+0x2f4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a2b      	ldr	r2, [pc, #172]	; (8000444 <display7seg+0x2f8>)
 8000396:	fb82 1203 	smull	r1, r2, r2, r3
 800039a:	1092      	asrs	r2, r2, #2
 800039c:	17db      	asrs	r3, r3, #31
 800039e:	1ad3      	subs	r3, r2, r3
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 f9db 	bl	800075c <display_1>
				led7_1 = 1;
 80003a6:	4b24      	ldr	r3, [pc, #144]	; (8000438 <display7seg+0x2ec>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	601a      	str	r2, [r3, #0]
				break;
 80003ac:	e0be      	b.n	800052c <display7seg+0x3e0>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b4:	4821      	ldr	r0, [pc, #132]	; (800043c <display7seg+0x2f0>)
 80003b6:	f001 fb3f 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c0:	481e      	ldr	r0, [pc, #120]	; (800043c <display7seg+0x2f0>)
 80003c2:	f001 fb39 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003cc:	481b      	ldr	r0, [pc, #108]	; (800043c <display7seg+0x2f0>)
 80003ce:	f001 fb33 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d8:	4818      	ldr	r0, [pc, #96]	; (800043c <display7seg+0x2f0>)
 80003da:	f001 fb2d 	bl	8001a38 <HAL_GPIO_WritePin>
				display_2(time_green_copy % 10);
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <display7seg+0x2fc>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <display7seg+0x2f8>)
 80003e4:	fb83 1302 	smull	r1, r3, r3, r2
 80003e8:	1099      	asrs	r1, r3, #2
 80003ea:	17d3      	asrs	r3, r2, #31
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	460b      	mov	r3, r1
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	440b      	add	r3, r1
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	1ad1      	subs	r1, r2, r3
 80003f8:	4608      	mov	r0, r1
 80003fa:	f000 fb49 	bl	8000a90 <display_2>
				display_1(time_red_copy % 10);
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <display7seg+0x2f4>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <display7seg+0x2f8>)
 8000404:	fb83 1302 	smull	r1, r3, r3, r2
 8000408:	1099      	asrs	r1, r3, #2
 800040a:	17d3      	asrs	r3, r2, #31
 800040c:	1ac9      	subs	r1, r1, r3
 800040e:	460b      	mov	r3, r1
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	440b      	add	r3, r1
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	1ad1      	subs	r1, r2, r3
 8000418:	4608      	mov	r0, r1
 800041a:	f000 f99f 	bl	800075c <display_1>
				led7_1 = 0;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <display7seg+0x2ec>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
				break;
 8000424:	e082      	b.n	800052c <display7seg+0x3e0>
		switch(led7_1){
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <display7seg+0x2ec>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d010      	beq.n	8000450 <display7seg+0x304>
 800042e:	2b01      	cmp	r3, #1
 8000430:	d040      	beq.n	80004b4 <display7seg+0x368>
}
 8000432:	e07b      	b.n	800052c <display7seg+0x3e0>
 8000434:	20000058 	.word	0x20000058
 8000438:	20000054 	.word	0x20000054
 800043c:	40010800 	.word	0x40010800
 8000440:	20000048 	.word	0x20000048
 8000444:	66666667 	.word	0x66666667
 8000448:	2000004c 	.word	0x2000004c
 800044c:	20000050 	.word	0x20000050
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000456:	4836      	ldr	r0, [pc, #216]	; (8000530 <display7seg+0x3e4>)
 8000458:	f001 faee 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000462:	4833      	ldr	r0, [pc, #204]	; (8000530 <display7seg+0x3e4>)
 8000464:	f001 fae8 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046e:	4830      	ldr	r0, [pc, #192]	; (8000530 <display7seg+0x3e4>)
 8000470:	f001 fae2 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800047a:	482d      	ldr	r0, [pc, #180]	; (8000530 <display7seg+0x3e4>)
 800047c:	f001 fadc 	bl	8001a38 <HAL_GPIO_WritePin>
				display_2(time_yellow_copy / 10);
 8000480:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <display7seg+0x3e8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a2c      	ldr	r2, [pc, #176]	; (8000538 <display7seg+0x3ec>)
 8000486:	fb82 1203 	smull	r1, r2, r2, r3
 800048a:	1092      	asrs	r2, r2, #2
 800048c:	17db      	asrs	r3, r3, #31
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fafd 	bl	8000a90 <display_2>
				display_1(time_red_copy / 10);
 8000496:	4b29      	ldr	r3, [pc, #164]	; (800053c <display7seg+0x3f0>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a27      	ldr	r2, [pc, #156]	; (8000538 <display7seg+0x3ec>)
 800049c:	fb82 1203 	smull	r1, r2, r2, r3
 80004a0:	1092      	asrs	r2, r2, #2
 80004a2:	17db      	asrs	r3, r3, #31
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f958 	bl	800075c <display_1>
				led7_1 = 1;
 80004ac:	4b24      	ldr	r3, [pc, #144]	; (8000540 <display7seg+0x3f4>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	601a      	str	r2, [r3, #0]
				break;
 80004b2:	e03b      	b.n	800052c <display7seg+0x3e0>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	481d      	ldr	r0, [pc, #116]	; (8000530 <display7seg+0x3e4>)
 80004bc:	f001 fabc 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	481a      	ldr	r0, [pc, #104]	; (8000530 <display7seg+0x3e4>)
 80004c8:	f001 fab6 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d2:	4817      	ldr	r0, [pc, #92]	; (8000530 <display7seg+0x3e4>)
 80004d4:	f001 fab0 	bl	8001a38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004de:	4814      	ldr	r0, [pc, #80]	; (8000530 <display7seg+0x3e4>)
 80004e0:	f001 faaa 	bl	8001a38 <HAL_GPIO_WritePin>
				display_2(time_yellow_copy % 10);
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <display7seg+0x3e8>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <display7seg+0x3ec>)
 80004ea:	fb83 1302 	smull	r1, r3, r3, r2
 80004ee:	1099      	asrs	r1, r3, #2
 80004f0:	17d3      	asrs	r3, r2, #31
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	460b      	mov	r3, r1
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	440b      	add	r3, r1
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	1ad1      	subs	r1, r2, r3
 80004fe:	4608      	mov	r0, r1
 8000500:	f000 fac6 	bl	8000a90 <display_2>
				display_1(time_red_copy % 10);
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <display7seg+0x3f0>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <display7seg+0x3ec>)
 800050a:	fb83 1302 	smull	r1, r3, r3, r2
 800050e:	1099      	asrs	r1, r3, #2
 8000510:	17d3      	asrs	r3, r2, #31
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	460b      	mov	r3, r1
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	440b      	add	r3, r1
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	1ad1      	subs	r1, r2, r3
 800051e:	4608      	mov	r0, r1
 8000520:	f000 f91c 	bl	800075c <display_1>
				led7_1 = 0;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <display7seg+0x3f4>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
				break;
 800052a:	bf00      	nop
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010800 	.word	0x40010800
 8000534:	20000050 	.word	0x20000050
 8000538:	66666667 	.word	0x66666667
 800053c:	20000048 	.word	0x20000048
 8000540:	20000054 	.word	0x20000054

08000544 <fsm_automatic_Run>:

void fsm_automatic_Run(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	switch(status){
 8000548:	4b7d      	ldr	r3, [pc, #500]	; (8000740 <fsm_automatic_Run+0x1fc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b04      	cmp	r3, #4
 800054e:	f200 80ec 	bhi.w	800072a <fsm_automatic_Run+0x1e6>
 8000552:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <fsm_automatic_Run+0x14>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	0800056d 	.word	0x0800056d
 800055c:	080005a5 	.word	0x080005a5
 8000560:	08000601 	.word	0x08000601
 8000564:	0800066b 	.word	0x0800066b
 8000568:	080006c3 	.word	0x080006c3
		    case INIT:
		    	light_1(black);
 800056c:	2003      	movs	r0, #3
 800056e:	f000 fe99 	bl	80012a4 <light_1>
		    	light_2(black);
 8000572:	2003      	movs	r0, #3
 8000574:	f000 fef2 	bl	800135c <light_2>
		    	time_red_copy = led_auto_buffer[0];
 8000578:	4b72      	ldr	r3, [pc, #456]	; (8000744 <fsm_automatic_Run+0x200>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a72      	ldr	r2, [pc, #456]	; (8000748 <fsm_automatic_Run+0x204>)
 800057e:	6013      	str	r3, [r2, #0]
		    	time_green_copy = led_auto_buffer[1];
 8000580:	4b70      	ldr	r3, [pc, #448]	; (8000744 <fsm_automatic_Run+0x200>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4a71      	ldr	r2, [pc, #452]	; (800074c <fsm_automatic_Run+0x208>)
 8000586:	6013      	str	r3, [r2, #0]
		    	time_yellow_copy =led_auto_buffer[2];
 8000588:	4b6e      	ldr	r3, [pc, #440]	; (8000744 <fsm_automatic_Run+0x200>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4a70      	ldr	r2, [pc, #448]	; (8000750 <fsm_automatic_Run+0x20c>)
 800058e:	6013      	str	r3, [r2, #0]
		    	status = AUTO_RED_GREEN;
 8000590:	4b6b      	ldr	r3, [pc, #428]	; (8000740 <fsm_automatic_Run+0x1fc>)
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
		    	setTimer_1s1(100);             // timer 1s
 8000596:	2064      	movs	r0, #100	; 0x64
 8000598:	f000 fd78 	bl	800108c <setTimer_1s1>
		    	setTimer_EN_GR1(freq1_led7);   // timer freg giua 2 con led7 cua 1 cum
 800059c:	200a      	movs	r0, #10
 800059e:	f000 fd61 	bl	8001064 <setTimer_EN_GR1>

		    	break;
 80005a2:	e0cb      	b.n	800073c <fsm_automatic_Run+0x1f8>
		    case AUTO_RED_GREEN:
		    	light_1(red);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 fe7d 	bl	80012a4 <light_1>
		    	light_2(green);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f000 fed6 	bl	800135c <light_2>

                if(timer_EN_GR1_flag == 1)
 80005b0:	4b68      	ldr	r3, [pc, #416]	; (8000754 <fsm_automatic_Run+0x210>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d104      	bne.n	80005c2 <fsm_automatic_Run+0x7e>
                {
                	setTimer_EN_GR1(freq1_led7);
 80005b8:	200a      	movs	r0, #10
 80005ba:	f000 fd53 	bl	8001064 <setTimer_EN_GR1>
                	display7seg();
 80005be:	f7ff fdc5 	bl	800014c <display7seg>
                }

				if(timer1_1s_flag == 1)
 80005c2:	4b65      	ldr	r3, [pc, #404]	; (8000758 <fsm_automatic_Run+0x214>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	f040 80b1 	bne.w	800072e <fsm_automatic_Run+0x1ea>
				{
					setTimer_1s1(100);
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f000 fd5d 	bl	800108c <setTimer_1s1>
					time_red_copy--;
 80005d2:	4b5d      	ldr	r3, [pc, #372]	; (8000748 <fsm_automatic_Run+0x204>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	4a5b      	ldr	r2, [pc, #364]	; (8000748 <fsm_automatic_Run+0x204>)
 80005da:	6013      	str	r3, [r2, #0]
					time_green_copy--;
 80005dc:	4b5b      	ldr	r3, [pc, #364]	; (800074c <fsm_automatic_Run+0x208>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4a5a      	ldr	r2, [pc, #360]	; (800074c <fsm_automatic_Run+0x208>)
 80005e4:	6013      	str	r3, [r2, #0]
					if(time_green_copy <= 0)
 80005e6:	4b59      	ldr	r3, [pc, #356]	; (800074c <fsm_automatic_Run+0x208>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f300 809f 	bgt.w	800072e <fsm_automatic_Run+0x1ea>
					{
						status = AUTO_RED_YELLOW;
 80005f0:	4b53      	ldr	r3, [pc, #332]	; (8000740 <fsm_automatic_Run+0x1fc>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	601a      	str	r2, [r3, #0]
						time_green_copy = led_auto_buffer[1];
 80005f6:	4b53      	ldr	r3, [pc, #332]	; (8000744 <fsm_automatic_Run+0x200>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	4a54      	ldr	r2, [pc, #336]	; (800074c <fsm_automatic_Run+0x208>)
 80005fc:	6013      	str	r3, [r2, #0]
					}
				}
		    	break;
 80005fe:	e096      	b.n	800072e <fsm_automatic_Run+0x1ea>
		    case AUTO_RED_YELLOW:
		    	light_1(red);
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fe4f 	bl	80012a4 <light_1>
		    	light_2(yellow);
 8000606:	2002      	movs	r0, #2
 8000608:	f000 fea8 	bl	800135c <light_2>
		    	if(timer_EN_GR1_flag == 1)
 800060c:	4b51      	ldr	r3, [pc, #324]	; (8000754 <fsm_automatic_Run+0x210>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d104      	bne.n	800061e <fsm_automatic_Run+0xda>
				{
					setTimer_EN_GR1(freq1_led7);
 8000614:	200a      	movs	r0, #10
 8000616:	f000 fd25 	bl	8001064 <setTimer_EN_GR1>
					display7seg();
 800061a:	f7ff fd97 	bl	800014c <display7seg>
				}


		    	if(timer1_1s_flag == 1)
 800061e:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <fsm_automatic_Run+0x214>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	f040 8085 	bne.w	8000732 <fsm_automatic_Run+0x1ee>
				{
					setTimer_1s1(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f000 fd2f 	bl	800108c <setTimer_1s1>
					time_red_copy--;
 800062e:	4b46      	ldr	r3, [pc, #280]	; (8000748 <fsm_automatic_Run+0x204>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a44      	ldr	r2, [pc, #272]	; (8000748 <fsm_automatic_Run+0x204>)
 8000636:	6013      	str	r3, [r2, #0]
					time_yellow_copy--;
 8000638:	4b45      	ldr	r3, [pc, #276]	; (8000750 <fsm_automatic_Run+0x20c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	4a44      	ldr	r2, [pc, #272]	; (8000750 <fsm_automatic_Run+0x20c>)
 8000640:	6013      	str	r3, [r2, #0]
					if(time_red_copy == 0 || time_yellow_copy == 0)
 8000642:	4b41      	ldr	r3, [pc, #260]	; (8000748 <fsm_automatic_Run+0x204>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <fsm_automatic_Run+0x10e>
 800064a:	4b41      	ldr	r3, [pc, #260]	; (8000750 <fsm_automatic_Run+0x20c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d16f      	bne.n	8000732 <fsm_automatic_Run+0x1ee>
					{
						status = AUTO_GREEN_RED;
 8000652:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <fsm_automatic_Run+0x1fc>)
 8000654:	2203      	movs	r2, #3
 8000656:	601a      	str	r2, [r3, #0]
						time_red_copy = led_auto_buffer[0];
 8000658:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <fsm_automatic_Run+0x200>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a3a      	ldr	r2, [pc, #232]	; (8000748 <fsm_automatic_Run+0x204>)
 800065e:	6013      	str	r3, [r2, #0]
						time_yellow_copy = led_auto_buffer[2];
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <fsm_automatic_Run+0x200>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	4a3a      	ldr	r2, [pc, #232]	; (8000750 <fsm_automatic_Run+0x20c>)
 8000666:	6013      	str	r3, [r2, #0]
					}
				}
		    	break;
 8000668:	e063      	b.n	8000732 <fsm_automatic_Run+0x1ee>
		    case AUTO_GREEN_RED:
		    	light_1(green);
 800066a:	2001      	movs	r0, #1
 800066c:	f000 fe1a 	bl	80012a4 <light_1>
		    	light_2(red);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fe73 	bl	800135c <light_2>
		    	if(timer_EN_GR1_flag == 1)
 8000676:	4b37      	ldr	r3, [pc, #220]	; (8000754 <fsm_automatic_Run+0x210>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d104      	bne.n	8000688 <fsm_automatic_Run+0x144>
				{
					setTimer_EN_GR1(freq1_led7);
 800067e:	200a      	movs	r0, #10
 8000680:	f000 fcf0 	bl	8001064 <setTimer_EN_GR1>
					display7seg();
 8000684:	f7ff fd62 	bl	800014c <display7seg>
				}
		    	if(timer1_1s_flag == 1)
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <fsm_automatic_Run+0x214>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d152      	bne.n	8000736 <fsm_automatic_Run+0x1f2>
				{
					setTimer_1s1(100);
 8000690:	2064      	movs	r0, #100	; 0x64
 8000692:	f000 fcfb 	bl	800108c <setTimer_1s1>
					time_green_copy--;
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <fsm_automatic_Run+0x208>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	4a2b      	ldr	r2, [pc, #172]	; (800074c <fsm_automatic_Run+0x208>)
 800069e:	6013      	str	r3, [r2, #0]
					time_red_copy--;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <fsm_automatic_Run+0x204>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	4a28      	ldr	r2, [pc, #160]	; (8000748 <fsm_automatic_Run+0x204>)
 80006a8:	6013      	str	r3, [r2, #0]
					if(time_green_copy == 0)
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <fsm_automatic_Run+0x208>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d141      	bne.n	8000736 <fsm_automatic_Run+0x1f2>
					{
						status = AUTO_YELLOW_RED;
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <fsm_automatic_Run+0x1fc>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	601a      	str	r2, [r3, #0]
						time_green_copy = led_auto_buffer[1];
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <fsm_automatic_Run+0x200>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	4a23      	ldr	r2, [pc, #140]	; (800074c <fsm_automatic_Run+0x208>)
 80006be:	6013      	str	r3, [r2, #0]
					}
				}
		    	break;
 80006c0:	e039      	b.n	8000736 <fsm_automatic_Run+0x1f2>
		    case AUTO_YELLOW_RED:
				light_1(yellow);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 fdee 	bl	80012a4 <light_1>
				light_2(red);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fe47 	bl	800135c <light_2>
				if(timer_EN_GR1_flag == 1)
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <fsm_automatic_Run+0x210>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d104      	bne.n	80006e0 <fsm_automatic_Run+0x19c>
				{
					setTimer_EN_GR1(freq1_led7);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fcc4 	bl	8001064 <setTimer_EN_GR1>
					display7seg();
 80006dc:	f7ff fd36 	bl	800014c <display7seg>
				}
				if(timer1_1s_flag == 1)
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <fsm_automatic_Run+0x214>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d128      	bne.n	800073a <fsm_automatic_Run+0x1f6>
				{
					setTimer_1s1(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f000 fccf 	bl	800108c <setTimer_1s1>
					time_yellow_copy--;
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <fsm_automatic_Run+0x20c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <fsm_automatic_Run+0x20c>)
 80006f6:	6013      	str	r3, [r2, #0]
					time_red_copy--;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <fsm_automatic_Run+0x204>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <fsm_automatic_Run+0x204>)
 8000700:	6013      	str	r3, [r2, #0]
					if(time_yellow_copy == 0 || time_red_copy == 0)
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <fsm_automatic_Run+0x20c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <fsm_automatic_Run+0x1ce>
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <fsm_automatic_Run+0x204>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d113      	bne.n	800073a <fsm_automatic_Run+0x1f6>
					{
						status = AUTO_RED_GREEN;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <fsm_automatic_Run+0x1fc>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
						time_yellow_copy = led_auto_buffer[2];
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <fsm_automatic_Run+0x200>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <fsm_automatic_Run+0x20c>)
 800071e:	6013      	str	r3, [r2, #0]
						time_red_copy = led_auto_buffer[0];
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <fsm_automatic_Run+0x200>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <fsm_automatic_Run+0x204>)
 8000726:	6013      	str	r3, [r2, #0]
					}
				}
				break;
 8000728:	e007      	b.n	800073a <fsm_automatic_Run+0x1f6>
		    default:
		    	break;
 800072a:	bf00      	nop
 800072c:	e006      	b.n	800073c <fsm_automatic_Run+0x1f8>
		    	break;
 800072e:	bf00      	nop
 8000730:	e004      	b.n	800073c <fsm_automatic_Run+0x1f8>
		    	break;
 8000732:	bf00      	nop
 8000734:	e002      	b.n	800073c <fsm_automatic_Run+0x1f8>
		    	break;
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <fsm_automatic_Run+0x1f8>
				break;
 800073a:	bf00      	nop
		}
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000058 	.word	0x20000058
 8000744:	20000000 	.word	0x20000000
 8000748:	20000048 	.word	0x20000048
 800074c:	2000004c 	.word	0x2000004c
 8000750:	20000050 	.word	0x20000050
 8000754:	20000010 	.word	0x20000010
 8000758:	200000b0 	.word	0x200000b0

0800075c <display_1>:
 *      Author: Admin
 */
#include "led7_segment.h"

void display_1(int num)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	switch(num)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b09      	cmp	r3, #9
 8000768:	f200 818a 	bhi.w	8000a80 <display_1+0x324>
 800076c:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <display_1+0x18>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	0800079d 	.word	0x0800079d
 8000778:	080007e7 	.word	0x080007e7
 800077c:	08000831 	.word	0x08000831
 8000780:	0800087b 	.word	0x0800087b
 8000784:	080008c5 	.word	0x080008c5
 8000788:	0800090f 	.word	0x0800090f
 800078c:	08000959 	.word	0x08000959
 8000790:	080009a3 	.word	0x080009a3
 8000794:	080009ed 	.word	0x080009ed
 8000798:	08000a37 	.word	0x08000a37
	{
		case 0:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2104      	movs	r1, #4
 80007a0:	48ba      	ldr	r0, [pc, #744]	; (8000a8c <display_1+0x330>)
 80007a2:	f001 f949 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	48b8      	ldr	r0, [pc, #736]	; (8000a8c <display_1+0x330>)
 80007ac:	f001 f944 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	48b5      	ldr	r0, [pc, #724]	; (8000a8c <display_1+0x330>)
 80007b6:	f001 f93f 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	48b3      	ldr	r0, [pc, #716]	; (8000a8c <display_1+0x330>)
 80007c0:	f001 f93a 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	48b0      	ldr	r0, [pc, #704]	; (8000a8c <display_1+0x330>)
 80007ca:	f001 f935 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	48ae      	ldr	r0, [pc, #696]	; (8000a8c <display_1+0x330>)
 80007d4:	f001 f930 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007de:	48ab      	ldr	r0, [pc, #684]	; (8000a8c <display_1+0x330>)
 80007e0:	f001 f92a 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 80007e4:	e14d      	b.n	8000a82 <display_1+0x326>
		case 1:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2104      	movs	r1, #4
 80007ea:	48a8      	ldr	r0, [pc, #672]	; (8000a8c <display_1+0x330>)
 80007ec:	f001 f924 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2108      	movs	r1, #8
 80007f4:	48a5      	ldr	r0, [pc, #660]	; (8000a8c <display_1+0x330>)
 80007f6:	f001 f91f 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2110      	movs	r1, #16
 80007fe:	48a3      	ldr	r0, [pc, #652]	; (8000a8c <display_1+0x330>)
 8000800:	f001 f91a 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2120      	movs	r1, #32
 8000808:	48a0      	ldr	r0, [pc, #640]	; (8000a8c <display_1+0x330>)
 800080a:	f001 f915 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	489e      	ldr	r0, [pc, #632]	; (8000a8c <display_1+0x330>)
 8000814:	f001 f910 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	489b      	ldr	r0, [pc, #620]	; (8000a8c <display_1+0x330>)
 800081e:	f001 f90b 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000828:	4898      	ldr	r0, [pc, #608]	; (8000a8c <display_1+0x330>)
 800082a:	f001 f905 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 800082e:	e128      	b.n	8000a82 <display_1+0x326>
		case 2:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	4895      	ldr	r0, [pc, #596]	; (8000a8c <display_1+0x330>)
 8000836:	f001 f8ff 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2108      	movs	r1, #8
 800083e:	4893      	ldr	r0, [pc, #588]	; (8000a8c <display_1+0x330>)
 8000840:	f001 f8fa 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	2110      	movs	r1, #16
 8000848:	4890      	ldr	r0, [pc, #576]	; (8000a8c <display_1+0x330>)
 800084a:	f001 f8f5 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	488e      	ldr	r0, [pc, #568]	; (8000a8c <display_1+0x330>)
 8000854:	f001 f8f0 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	488b      	ldr	r0, [pc, #556]	; (8000a8c <display_1+0x330>)
 800085e:	f001 f8eb 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	4889      	ldr	r0, [pc, #548]	; (8000a8c <display_1+0x330>)
 8000868:	f001 f8e6 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	4886      	ldr	r0, [pc, #536]	; (8000a8c <display_1+0x330>)
 8000874:	f001 f8e0 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000878:	e103      	b.n	8000a82 <display_1+0x326>
		case 3:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2104      	movs	r1, #4
 800087e:	4883      	ldr	r0, [pc, #524]	; (8000a8c <display_1+0x330>)
 8000880:	f001 f8da 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2108      	movs	r1, #8
 8000888:	4880      	ldr	r0, [pc, #512]	; (8000a8c <display_1+0x330>)
 800088a:	f001 f8d5 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2110      	movs	r1, #16
 8000892:	487e      	ldr	r0, [pc, #504]	; (8000a8c <display_1+0x330>)
 8000894:	f001 f8d0 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2120      	movs	r1, #32
 800089c:	487b      	ldr	r0, [pc, #492]	; (8000a8c <display_1+0x330>)
 800089e:	f001 f8cb 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	4879      	ldr	r0, [pc, #484]	; (8000a8c <display_1+0x330>)
 80008a8:	f001 f8c6 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	4876      	ldr	r0, [pc, #472]	; (8000a8c <display_1+0x330>)
 80008b2:	f001 f8c1 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008bc:	4873      	ldr	r0, [pc, #460]	; (8000a8c <display_1+0x330>)
 80008be:	f001 f8bb 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 80008c2:	e0de      	b.n	8000a82 <display_1+0x326>
		case 4:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2104      	movs	r1, #4
 80008c8:	4870      	ldr	r0, [pc, #448]	; (8000a8c <display_1+0x330>)
 80008ca:	f001 f8b5 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	486e      	ldr	r0, [pc, #440]	; (8000a8c <display_1+0x330>)
 80008d4:	f001 f8b0 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2110      	movs	r1, #16
 80008dc:	486b      	ldr	r0, [pc, #428]	; (8000a8c <display_1+0x330>)
 80008de:	f001 f8ab 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2120      	movs	r1, #32
 80008e6:	4869      	ldr	r0, [pc, #420]	; (8000a8c <display_1+0x330>)
 80008e8:	f001 f8a6 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	4866      	ldr	r0, [pc, #408]	; (8000a8c <display_1+0x330>)
 80008f2:	f001 f8a1 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	4864      	ldr	r0, [pc, #400]	; (8000a8c <display_1+0x330>)
 80008fc:	f001 f89c 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	4861      	ldr	r0, [pc, #388]	; (8000a8c <display_1+0x330>)
 8000908:	f001 f896 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 800090c:	e0b9      	b.n	8000a82 <display_1+0x326>
		case 5:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2104      	movs	r1, #4
 8000912:	485e      	ldr	r0, [pc, #376]	; (8000a8c <display_1+0x330>)
 8000914:	f001 f890 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2108      	movs	r1, #8
 800091c:	485b      	ldr	r0, [pc, #364]	; (8000a8c <display_1+0x330>)
 800091e:	f001 f88b 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2110      	movs	r1, #16
 8000926:	4859      	ldr	r0, [pc, #356]	; (8000a8c <display_1+0x330>)
 8000928:	f001 f886 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2120      	movs	r1, #32
 8000930:	4856      	ldr	r0, [pc, #344]	; (8000a8c <display_1+0x330>)
 8000932:	f001 f881 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	4854      	ldr	r0, [pc, #336]	; (8000a8c <display_1+0x330>)
 800093c:	f001 f87c 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	4851      	ldr	r0, [pc, #324]	; (8000a8c <display_1+0x330>)
 8000946:	f001 f877 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	484e      	ldr	r0, [pc, #312]	; (8000a8c <display_1+0x330>)
 8000952:	f001 f871 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000956:	e094      	b.n	8000a82 <display_1+0x326>
		case 6:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2104      	movs	r1, #4
 800095c:	484b      	ldr	r0, [pc, #300]	; (8000a8c <display_1+0x330>)
 800095e:	f001 f86b 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2108      	movs	r1, #8
 8000966:	4849      	ldr	r0, [pc, #292]	; (8000a8c <display_1+0x330>)
 8000968:	f001 f866 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4846      	ldr	r0, [pc, #280]	; (8000a8c <display_1+0x330>)
 8000972:	f001 f861 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	4844      	ldr	r0, [pc, #272]	; (8000a8c <display_1+0x330>)
 800097c:	f001 f85c 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	4841      	ldr	r0, [pc, #260]	; (8000a8c <display_1+0x330>)
 8000986:	f001 f857 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	483f      	ldr	r0, [pc, #252]	; (8000a8c <display_1+0x330>)
 8000990:	f001 f852 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099a:	483c      	ldr	r0, [pc, #240]	; (8000a8c <display_1+0x330>)
 800099c:	f001 f84c 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 80009a0:	e06f      	b.n	8000a82 <display_1+0x326>
		case 7:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2104      	movs	r1, #4
 80009a6:	4839      	ldr	r0, [pc, #228]	; (8000a8c <display_1+0x330>)
 80009a8:	f001 f846 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	4836      	ldr	r0, [pc, #216]	; (8000a8c <display_1+0x330>)
 80009b2:	f001 f841 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2110      	movs	r1, #16
 80009ba:	4834      	ldr	r0, [pc, #208]	; (8000a8c <display_1+0x330>)
 80009bc:	f001 f83c 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2120      	movs	r1, #32
 80009c4:	4831      	ldr	r0, [pc, #196]	; (8000a8c <display_1+0x330>)
 80009c6:	f001 f837 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	482f      	ldr	r0, [pc, #188]	; (8000a8c <display_1+0x330>)
 80009d0:	f001 f832 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	482c      	ldr	r0, [pc, #176]	; (8000a8c <display_1+0x330>)
 80009da:	f001 f82d 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	4829      	ldr	r0, [pc, #164]	; (8000a8c <display_1+0x330>)
 80009e6:	f001 f827 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 80009ea:	e04a      	b.n	8000a82 <display_1+0x326>
		case 8:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2104      	movs	r1, #4
 80009f0:	4826      	ldr	r0, [pc, #152]	; (8000a8c <display_1+0x330>)
 80009f2:	f001 f821 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	4824      	ldr	r0, [pc, #144]	; (8000a8c <display_1+0x330>)
 80009fc:	f001 f81c 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	4821      	ldr	r0, [pc, #132]	; (8000a8c <display_1+0x330>)
 8000a06:	f001 f817 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	481f      	ldr	r0, [pc, #124]	; (8000a8c <display_1+0x330>)
 8000a10:	f001 f812 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	481c      	ldr	r0, [pc, #112]	; (8000a8c <display_1+0x330>)
 8000a1a:	f001 f80d 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	481a      	ldr	r0, [pc, #104]	; (8000a8c <display_1+0x330>)
 8000a24:	f001 f808 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4817      	ldr	r0, [pc, #92]	; (8000a8c <display_1+0x330>)
 8000a30:	f001 f802 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000a34:	e025      	b.n	8000a82 <display_1+0x326>
		case 9:
				  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4814      	ldr	r0, [pc, #80]	; (8000a8c <display_1+0x330>)
 8000a3c:	f000 fffc 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2108      	movs	r1, #8
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <display_1+0x330>)
 8000a46:	f000 fff7 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	480f      	ldr	r0, [pc, #60]	; (8000a8c <display_1+0x330>)
 8000a50:	f000 fff2 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2120      	movs	r1, #32
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <display_1+0x330>)
 8000a5a:	f000 ffed 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <display_1+0x330>)
 8000a64:	f000 ffe8 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <display_1+0x330>)
 8000a6e:	f000 ffe3 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <display_1+0x330>)
 8000a7a:	f000 ffdd 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000a7e:	e000      	b.n	8000a82 <display_1+0x326>
		default:
				  break;
 8000a80:	bf00      	nop
	}
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <display_2>:
void display_2(int num)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	switch(num)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b09      	cmp	r3, #9
 8000a9c:	f200 81c8 	bhi.w	8000e30 <display_2+0x3a0>
 8000aa0:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <display_2+0x18>)
 8000aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa6:	bf00      	nop
 8000aa8:	08000ad1 	.word	0x08000ad1
 8000aac:	08000b27 	.word	0x08000b27
 8000ab0:	08000b7d 	.word	0x08000b7d
 8000ab4:	08000bd3 	.word	0x08000bd3
 8000ab8:	08000c29 	.word	0x08000c29
 8000abc:	08000c7f 	.word	0x08000c7f
 8000ac0:	08000cd5 	.word	0x08000cd5
 8000ac4:	08000d2b 	.word	0x08000d2b
 8000ac8:	08000d81 	.word	0x08000d81
 8000acc:	08000dd7 	.word	0x08000dd7
	{
		case 0:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad6:	48d5      	ldr	r0, [pc, #852]	; (8000e2c <display_2+0x39c>)
 8000ad8:	f000 ffae 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	48d2      	ldr	r0, [pc, #840]	; (8000e2c <display_2+0x39c>)
 8000ae4:	f000 ffa8 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aee:	48cf      	ldr	r0, [pc, #828]	; (8000e2c <display_2+0x39c>)
 8000af0:	f000 ffa2 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	48cc      	ldr	r0, [pc, #816]	; (8000e2c <display_2+0x39c>)
 8000afc:	f000 ff9c 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	48c9      	ldr	r0, [pc, #804]	; (8000e2c <display_2+0x39c>)
 8000b08:	f000 ff96 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b12:	48c6      	ldr	r0, [pc, #792]	; (8000e2c <display_2+0x39c>)
 8000b14:	f000 ff90 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1e:	48c3      	ldr	r0, [pc, #780]	; (8000e2c <display_2+0x39c>)
 8000b20:	f000 ff8a 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000b24:	e185      	b.n	8000e32 <display_2+0x3a2>
		case 1:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2c:	48bf      	ldr	r0, [pc, #764]	; (8000e2c <display_2+0x39c>)
 8000b2e:	f000 ff83 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b38:	48bc      	ldr	r0, [pc, #752]	; (8000e2c <display_2+0x39c>)
 8000b3a:	f000 ff7d 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b44:	48b9      	ldr	r0, [pc, #740]	; (8000e2c <display_2+0x39c>)
 8000b46:	f000 ff77 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b50:	48b6      	ldr	r0, [pc, #728]	; (8000e2c <display_2+0x39c>)
 8000b52:	f000 ff71 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	48b3      	ldr	r0, [pc, #716]	; (8000e2c <display_2+0x39c>)
 8000b5e:	f000 ff6b 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b68:	48b0      	ldr	r0, [pc, #704]	; (8000e2c <display_2+0x39c>)
 8000b6a:	f000 ff65 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b74:	48ad      	ldr	r0, [pc, #692]	; (8000e2c <display_2+0x39c>)
 8000b76:	f000 ff5f 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000b7a:	e15a      	b.n	8000e32 <display_2+0x3a2>
		case 2:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b82:	48aa      	ldr	r0, [pc, #680]	; (8000e2c <display_2+0x39c>)
 8000b84:	f000 ff58 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8e:	48a7      	ldr	r0, [pc, #668]	; (8000e2c <display_2+0x39c>)
 8000b90:	f000 ff52 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b9a:	48a4      	ldr	r0, [pc, #656]	; (8000e2c <display_2+0x39c>)
 8000b9c:	f000 ff4c 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba6:	48a1      	ldr	r0, [pc, #644]	; (8000e2c <display_2+0x39c>)
 8000ba8:	f000 ff46 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	489e      	ldr	r0, [pc, #632]	; (8000e2c <display_2+0x39c>)
 8000bb4:	f000 ff40 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbe:	489b      	ldr	r0, [pc, #620]	; (8000e2c <display_2+0x39c>)
 8000bc0:	f000 ff3a 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bca:	4898      	ldr	r0, [pc, #608]	; (8000e2c <display_2+0x39c>)
 8000bcc:	f000 ff34 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000bd0:	e12f      	b.n	8000e32 <display_2+0x3a2>
		case 3:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd8:	4894      	ldr	r0, [pc, #592]	; (8000e2c <display_2+0x39c>)
 8000bda:	f000 ff2d 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be4:	4891      	ldr	r0, [pc, #580]	; (8000e2c <display_2+0x39c>)
 8000be6:	f000 ff27 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf0:	488e      	ldr	r0, [pc, #568]	; (8000e2c <display_2+0x39c>)
 8000bf2:	f000 ff21 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	488b      	ldr	r0, [pc, #556]	; (8000e2c <display_2+0x39c>)
 8000bfe:	f000 ff1b 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c08:	4888      	ldr	r0, [pc, #544]	; (8000e2c <display_2+0x39c>)
 8000c0a:	f000 ff15 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c14:	4885      	ldr	r0, [pc, #532]	; (8000e2c <display_2+0x39c>)
 8000c16:	f000 ff0f 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c20:	4882      	ldr	r0, [pc, #520]	; (8000e2c <display_2+0x39c>)
 8000c22:	f000 ff09 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000c26:	e104      	b.n	8000e32 <display_2+0x3a2>
		case 4:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2e:	487f      	ldr	r0, [pc, #508]	; (8000e2c <display_2+0x39c>)
 8000c30:	f000 ff02 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3a:	487c      	ldr	r0, [pc, #496]	; (8000e2c <display_2+0x39c>)
 8000c3c:	f000 fefc 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c46:	4879      	ldr	r0, [pc, #484]	; (8000e2c <display_2+0x39c>)
 8000c48:	f000 fef6 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c52:	4876      	ldr	r0, [pc, #472]	; (8000e2c <display_2+0x39c>)
 8000c54:	f000 fef0 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	4873      	ldr	r0, [pc, #460]	; (8000e2c <display_2+0x39c>)
 8000c60:	f000 feea 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6a:	4870      	ldr	r0, [pc, #448]	; (8000e2c <display_2+0x39c>)
 8000c6c:	f000 fee4 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c76:	486d      	ldr	r0, [pc, #436]	; (8000e2c <display_2+0x39c>)
 8000c78:	f000 fede 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000c7c:	e0d9      	b.n	8000e32 <display_2+0x3a2>
		case 5:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c84:	4869      	ldr	r0, [pc, #420]	; (8000e2c <display_2+0x39c>)
 8000c86:	f000 fed7 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	4866      	ldr	r0, [pc, #408]	; (8000e2c <display_2+0x39c>)
 8000c92:	f000 fed1 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9c:	4863      	ldr	r0, [pc, #396]	; (8000e2c <display_2+0x39c>)
 8000c9e:	f000 fecb 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca8:	4860      	ldr	r0, [pc, #384]	; (8000e2c <display_2+0x39c>)
 8000caa:	f000 fec5 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb4:	485d      	ldr	r0, [pc, #372]	; (8000e2c <display_2+0x39c>)
 8000cb6:	f000 febf 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	485a      	ldr	r0, [pc, #360]	; (8000e2c <display_2+0x39c>)
 8000cc2:	f000 feb9 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ccc:	4857      	ldr	r0, [pc, #348]	; (8000e2c <display_2+0x39c>)
 8000cce:	f000 feb3 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000cd2:	e0ae      	b.n	8000e32 <display_2+0x3a2>
		case 6:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cda:	4854      	ldr	r0, [pc, #336]	; (8000e2c <display_2+0x39c>)
 8000cdc:	f000 feac 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce6:	4851      	ldr	r0, [pc, #324]	; (8000e2c <display_2+0x39c>)
 8000ce8:	f000 fea6 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf2:	484e      	ldr	r0, [pc, #312]	; (8000e2c <display_2+0x39c>)
 8000cf4:	f000 fea0 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfe:	484b      	ldr	r0, [pc, #300]	; (8000e2c <display_2+0x39c>)
 8000d00:	f000 fe9a 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0a:	4848      	ldr	r0, [pc, #288]	; (8000e2c <display_2+0x39c>)
 8000d0c:	f000 fe94 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d16:	4845      	ldr	r0, [pc, #276]	; (8000e2c <display_2+0x39c>)
 8000d18:	f000 fe8e 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d22:	4842      	ldr	r0, [pc, #264]	; (8000e2c <display_2+0x39c>)
 8000d24:	f000 fe88 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000d28:	e083      	b.n	8000e32 <display_2+0x3a2>
		case 7:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d30:	483e      	ldr	r0, [pc, #248]	; (8000e2c <display_2+0x39c>)
 8000d32:	f000 fe81 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3c:	483b      	ldr	r0, [pc, #236]	; (8000e2c <display_2+0x39c>)
 8000d3e:	f000 fe7b 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d48:	4838      	ldr	r0, [pc, #224]	; (8000e2c <display_2+0x39c>)
 8000d4a:	f000 fe75 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d54:	4835      	ldr	r0, [pc, #212]	; (8000e2c <display_2+0x39c>)
 8000d56:	f000 fe6f 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	4832      	ldr	r0, [pc, #200]	; (8000e2c <display_2+0x39c>)
 8000d62:	f000 fe69 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6c:	482f      	ldr	r0, [pc, #188]	; (8000e2c <display_2+0x39c>)
 8000d6e:	f000 fe63 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	482c      	ldr	r0, [pc, #176]	; (8000e2c <display_2+0x39c>)
 8000d7a:	f000 fe5d 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000d7e:	e058      	b.n	8000e32 <display_2+0x3a2>
		case 8:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d86:	4829      	ldr	r0, [pc, #164]	; (8000e2c <display_2+0x39c>)
 8000d88:	f000 fe56 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d92:	4826      	ldr	r0, [pc, #152]	; (8000e2c <display_2+0x39c>)
 8000d94:	f000 fe50 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9e:	4823      	ldr	r0, [pc, #140]	; (8000e2c <display_2+0x39c>)
 8000da0:	f000 fe4a 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	4820      	ldr	r0, [pc, #128]	; (8000e2c <display_2+0x39c>)
 8000dac:	f000 fe44 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db6:	481d      	ldr	r0, [pc, #116]	; (8000e2c <display_2+0x39c>)
 8000db8:	f000 fe3e 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc2:	481a      	ldr	r0, [pc, #104]	; (8000e2c <display_2+0x39c>)
 8000dc4:	f000 fe38 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dce:	4817      	ldr	r0, [pc, #92]	; (8000e2c <display_2+0x39c>)
 8000dd0:	f000 fe32 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000dd4:	e02d      	b.n	8000e32 <display_2+0x3a2>
		case 9:
				  HAL_GPIO_WritePin(GPIOB, SEG10_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <display_2+0x39c>)
 8000dde:	f000 fe2b 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG11_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	4810      	ldr	r0, [pc, #64]	; (8000e2c <display_2+0x39c>)
 8000dea:	f000 fe25 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG12_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <display_2+0x39c>)
 8000df6:	f000 fe1f 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG13_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <display_2+0x39c>)
 8000e02:	f000 fe19 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG14_Pin, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <display_2+0x39c>)
 8000e0e:	f000 fe13 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG15_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <display_2+0x39c>)
 8000e1a:	f000 fe0d 	bl	8001a38 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, SEG16_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e24:	4801      	ldr	r0, [pc, #4]	; (8000e2c <display_2+0x39c>)
 8000e26:	f000 fe07 	bl	8001a38 <HAL_GPIO_WritePin>
				  break;
 8000e2a:	e002      	b.n	8000e32 <display_2+0x3a2>
 8000e2c:	40010c00 	.word	0x40010c00
		default:
				  break;
 8000e30:	bf00      	nop
	}
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 fb0e 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f812 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f000 f898 	bl	8000f7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e4c:	f000 f84a 	bl	8000ee4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <main+0x28>)
 8000e52:	f001 fa37 	bl	80022c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <main+0x2c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fsm_automatic_Run();
 8000e5c:	f7ff fb72 	bl	8000544 <fsm_automatic_Run>
 8000e60:	e7fc      	b.n	8000e5c <main+0x20>
 8000e62:	bf00      	nop
 8000e64:	2000005c 	.word	0x2000005c
 8000e68:	20000058 	.word	0x20000058

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b090      	sub	sp, #64	; 0x40
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2228      	movs	r2, #40	; 0x28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fdae 	bl	80029dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	2310      	movs	r3, #16
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fde0 	bl	8001a68 <HAL_RCC_OscConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eae:	f000 f8d3 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 f84e 	bl	8001f6c <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 f8bf 	bl	8001058 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	; 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f18:	2209      	movs	r2, #9
 8000f1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f28:	4813      	ldr	r0, [pc, #76]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f2a:	f001 f97b 	bl	8002224 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f34:	f000 f890 	bl	8001058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f46:	f001 faf9 	bl	800253c <HAL_TIM_ConfigClockSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f50:	f000 f882 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f62:	f001 fcd1 	bl	8002908 <HAL_TIMEx_MasterConfigSynchronization>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f6c:	f000 f874 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000005c 	.word	0x2000005c

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_GPIO_Init+0xbc>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a28      	ldr	r2, [pc, #160]	; (8001038 <MX_GPIO_Init+0xbc>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_GPIO_Init+0xbc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_GPIO_Init+0xbc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a22      	ldr	r2, [pc, #136]	; (8001038 <MX_GPIO_Init+0xbc>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_GPIO_Init+0xbc>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin|GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f640 71fe 	movw	r1, #4094	; 0xffe
 8000fc6:	481d      	ldr	r0, [pc, #116]	; (800103c <MX_GPIO_Init+0xc0>)
 8000fc8:	f000 fd36 	bl	8001a38 <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG11_Pin|SEG12_Pin|SEG13_Pin
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000fd2:	481b      	ldr	r0, [pc, #108]	; (8001040 <MX_GPIO_Init+0xc4>)
 8000fd4:	f000 fd30 	bl	8001a38 <HAL_GPIO_WritePin>
                          |SEG6_Pin|SEG10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_TEST_Pin GREEN_1_Pin YELLOW_1_Pin RED_1_Pin
                           GREEN_2_Pin YELLOW_2_Pin RED_2_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin
 8000fd8:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000fdc:	60bb      	str	r3, [r7, #8]
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4812      	ldr	r0, [pc, #72]	; (800103c <MX_GPIO_Init+0xc0>)
 8000ff2:	f000 fba5 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG11_Pin SEG12_Pin SEG13_Pin
                           SEG14_Pin SEG15_Pin SEG16_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG11_Pin|SEG12_Pin|SEG13_Pin
 8000ff6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000ffa:	60bb      	str	r3, [r7, #8]
                          |SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	4619      	mov	r1, r3
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_GPIO_Init+0xc4>)
 8001010:	f000 fb96 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001014:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001018:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4619      	mov	r1, r3
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <MX_GPIO_Init+0xc0>)
 800102a:	f000 fb89 	bl	8001740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00

08001044 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  timerRun();
 800104c:	f000 f832 	bl	80010b4 <timerRun>
  //getKeyInput();
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <setTimer_EN_GR1>:
{
	timer_counter = duration;
	timer_flag = 0;
}
void setTimer_EN_GR1(int duration)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	timer_EN_GR1_counter = duration;
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <setTimer_EN_GR1+0x20>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
	timer_EN_GR1_flag = 0;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <setTimer_EN_GR1+0x24>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200000a8 	.word	0x200000a8
 8001088:	20000010 	.word	0x20000010

0800108c <setTimer_1s1>:
{
	timer_EN_GR2_counter = duration;
	timer_EN_GR2_flag = 0;
}
void setTimer_1s1(int duration)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	timer1_1s_counter = duration;
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <setTimer_1s1+0x20>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
	timer1_1s_flag = 0;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <setTimer_1s1+0x24>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000018 	.word	0x20000018
 80010b0:	200000b0 	.word	0x200000b0

080010b4 <timerRun>:
{
	timer2_1s_counter = duration;
	timer2_1s_flag = 0;
}
void timerRun()
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	if(timer_counter > 0)
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <timerRun+0xac>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dd0b      	ble.n	80010d8 <timerRun+0x24>
	{
		timer_counter--;
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <timerRun+0xac>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <timerRun+0xac>)
 80010c8:	6013      	str	r3, [r2, #0]
		if(timer_counter <= 0)
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <timerRun+0xac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dc02      	bgt.n	80010d8 <timerRun+0x24>
		{
			timer_flag = 1;
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <timerRun+0xb0>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_EN_GR1_counter > 0)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <timerRun+0xb4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd0b      	ble.n	80010f8 <timerRun+0x44>
	{
	    timer_EN_GR1_counter--;
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <timerRun+0xb4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	4a20      	ldr	r2, [pc, #128]	; (8001168 <timerRun+0xb4>)
 80010e8:	6013      	str	r3, [r2, #0]
		if(timer_EN_GR1_counter <= 0)
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <timerRun+0xb4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dc02      	bgt.n	80010f8 <timerRun+0x44>
		{
			timer_EN_GR1_flag = 1;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <timerRun+0xb8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_EN_GR2_counter > 0)
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <timerRun+0xbc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd0b      	ble.n	8001118 <timerRun+0x64>
	{
	    timer_EN_GR2_counter--;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <timerRun+0xbc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <timerRun+0xbc>)
 8001108:	6013      	str	r3, [r2, #0]
		if(timer_EN_GR2_counter <= 0)
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <timerRun+0xbc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	dc02      	bgt.n	8001118 <timerRun+0x64>
		{
			timer_EN_GR2_flag = 1;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <timerRun+0xc0>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
		}
	}
    if(timer1_1s_counter > 0)
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <timerRun+0xc4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd0b      	ble.n	8001138 <timerRun+0x84>
    {
    	timer1_1s_counter--;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <timerRun+0xc4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <timerRun+0xc4>)
 8001128:	6013      	str	r3, [r2, #0]
    	if(timer1_1s_counter <= 0)
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <timerRun+0xc4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	dc02      	bgt.n	8001138 <timerRun+0x84>
    	{
    		timer1_1s_flag = 1;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <timerRun+0xc8>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
    	}
    }
    if(timer2_1s_counter > 0)
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <timerRun+0xcc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	dd0b      	ble.n	8001158 <timerRun+0xa4>
	{
		timer2_1s_counter--;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <timerRun+0xcc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3b01      	subs	r3, #1
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <timerRun+0xcc>)
 8001148:	6013      	str	r3, [r2, #0]
		if(timer2_1s_counter <= 0)
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <timerRun+0xcc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	dc02      	bgt.n	8001158 <timerRun+0xa4>
		{
			timer2_1s_flag = 1;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <timerRun+0xd0>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	200000a4 	.word	0x200000a4
 8001164:	2000000c 	.word	0x2000000c
 8001168:	200000a8 	.word	0x200000a8
 800116c:	20000010 	.word	0x20000010
 8001170:	200000ac 	.word	0x200000ac
 8001174:	20000014 	.word	0x20000014
 8001178:	20000018 	.word	0x20000018
 800117c:	200000b0 	.word	0x200000b0
 8001180:	2000001c 	.word	0x2000001c
 8001184:	200000b4 	.word	0x200000b4

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_MspInit+0x5c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_MspInit+0x5c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_MspInit+0x5c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_MspInit+0x5c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_MspInit+0x60>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_MspInit+0x60>)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011fc:	d113      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_TIM_Base_MspInit+0x44>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <HAL_TIM_Base_MspInit+0x44>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_TIM_Base_MspInit+0x44>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	201c      	movs	r0, #28
 800121c:	f000 fa59 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001220:	201c      	movs	r0, #28
 8001222:	f000 fa72 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 f937 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <TIM2_IRQHandler+0x10>)
 800128a:	f001 f867 	bl	800235c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000005c 	.word	0x2000005c

08001298 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <light_1>:
 *      Author: Admin
 */
#include "traffic_light.h"

void light_1(enum led color)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	switch(color){
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d84b      	bhi.n	800134c <light_1+0xa8>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <light_1+0x18>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012ed 	.word	0x080012ed
 80012c4:	0800130d 	.word	0x0800130d
 80012c8:	0800132d 	.word	0x0800132d
		case red:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2110      	movs	r1, #16
 80012d0:	4821      	ldr	r0, [pc, #132]	; (8001358 <light_1+0xb4>)
 80012d2:	f000 fbb1 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2104      	movs	r1, #4
 80012da:	481f      	ldr	r0, [pc, #124]	; (8001358 <light_1+0xb4>)
 80012dc:	f000 fbac 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2108      	movs	r1, #8
 80012e4:	481c      	ldr	r0, [pc, #112]	; (8001358 <light_1+0xb4>)
 80012e6:	f000 fba7 	bl	8001a38 <HAL_GPIO_WritePin>
			break;
 80012ea:	e030      	b.n	800134e <light_1+0xaa>
		case green:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2110      	movs	r1, #16
 80012f0:	4819      	ldr	r0, [pc, #100]	; (8001358 <light_1+0xb4>)
 80012f2:	f000 fba1 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2104      	movs	r1, #4
 80012fa:	4817      	ldr	r0, [pc, #92]	; (8001358 <light_1+0xb4>)
 80012fc:	f000 fb9c 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2108      	movs	r1, #8
 8001304:	4814      	ldr	r0, [pc, #80]	; (8001358 <light_1+0xb4>)
 8001306:	f000 fb97 	bl	8001a38 <HAL_GPIO_WritePin>
			break;
 800130a:	e020      	b.n	800134e <light_1+0xaa>
		case yellow:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2110      	movs	r1, #16
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <light_1+0xb4>)
 8001312:	f000 fb91 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	2104      	movs	r1, #4
 800131a:	480f      	ldr	r0, [pc, #60]	; (8001358 <light_1+0xb4>)
 800131c:	f000 fb8c 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2108      	movs	r1, #8
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <light_1+0xb4>)
 8001326:	f000 fb87 	bl	8001a38 <HAL_GPIO_WritePin>
			break;
 800132a:	e010      	b.n	800134e <light_1+0xaa>
		case black:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2110      	movs	r1, #16
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <light_1+0xb4>)
 8001332:	f000 fb81 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2104      	movs	r1, #4
 800133a:	4807      	ldr	r0, [pc, #28]	; (8001358 <light_1+0xb4>)
 800133c:	f000 fb7c 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2108      	movs	r1, #8
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <light_1+0xb4>)
 8001346:	f000 fb77 	bl	8001a38 <HAL_GPIO_WritePin>
			break;
 800134a:	e000      	b.n	800134e <light_1+0xaa>
		default:
			break;
 800134c:	bf00      	nop
	}
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40010800 	.word	0x40010800

0800135c <light_2>:
void light_2(enum led color)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b03      	cmp	r3, #3
 800136a:	d84b      	bhi.n	8001404 <light_2+0xa8>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <light_2+0x18>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001385 	.word	0x08001385
 8001378:	080013a5 	.word	0x080013a5
 800137c:	080013c5 	.word	0x080013c5
 8001380:	080013e5 	.word	0x080013e5
		case red:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	4821      	ldr	r0, [pc, #132]	; (8001410 <light_2+0xb4>)
 800138a:	f000 fb55 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2120      	movs	r1, #32
 8001392:	481f      	ldr	r0, [pc, #124]	; (8001410 <light_2+0xb4>)
 8001394:	f000 fb50 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	2140      	movs	r1, #64	; 0x40
 800139c:	481c      	ldr	r0, [pc, #112]	; (8001410 <light_2+0xb4>)
 800139e:	f000 fb4b 	bl	8001a38 <HAL_GPIO_WritePin>
			break;
 80013a2:	e030      	b.n	8001406 <light_2+0xaa>
		case green:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	4819      	ldr	r0, [pc, #100]	; (8001410 <light_2+0xb4>)
 80013aa:	f000 fb45 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	4817      	ldr	r0, [pc, #92]	; (8001410 <light_2+0xb4>)
 80013b4:	f000 fb40 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	4814      	ldr	r0, [pc, #80]	; (8001410 <light_2+0xb4>)
 80013be:	f000 fb3b 	bl	8001a38 <HAL_GPIO_WritePin>
			break;
 80013c2:	e020      	b.n	8001406 <light_2+0xaa>
		case yellow:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <light_2+0xb4>)
 80013ca:	f000 fb35 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2120      	movs	r1, #32
 80013d2:	480f      	ldr	r0, [pc, #60]	; (8001410 <light_2+0xb4>)
 80013d4:	f000 fb30 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <light_2+0xb4>)
 80013de:	f000 fb2b 	bl	8001a38 <HAL_GPIO_WritePin>
			break;
 80013e2:	e010      	b.n	8001406 <light_2+0xaa>
		case black:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2110      	movs	r1, #16
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <light_2+0xb4>)
 80013ea:	f000 fb25 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2104      	movs	r1, #4
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <light_2+0xb4>)
 80013f4:	f000 fb20 	bl	8001a38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2108      	movs	r1, #8
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <light_2+0xb4>)
 80013fe:	f000 fb1b 	bl	8001a38 <HAL_GPIO_WritePin>
			break;
 8001402:	e000      	b.n	8001406 <light_2+0xaa>
		default:
			break;
 8001404:	bf00      	nop
	}
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40010800 	.word	0x40010800

08001414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001414:	f7ff ff40 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800141a:	490c      	ldr	r1, [pc, #48]	; (800144c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800141c:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <LoopFillZerobss+0x16>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001430:	4c09      	ldr	r4, [pc, #36]	; (8001458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143e:	f001 fad5 	bl	80029ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001442:	f7ff fcfb 	bl	8000e3c <main>
  bx lr
 8001446:	4770      	bx	lr
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001450:	08002a78 	.word	0x08002a78
  ldr r2, =_sbss
 8001454:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001458:	200000bc 	.word	0x200000bc

0800145c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC1_2_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_Init+0x28>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x28>)
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f923 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001476:	200f      	movs	r0, #15
 8001478:	f000 f808 	bl	800148c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147c:	f7ff fe84 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40022000 	.word	0x40022000

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x54>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x58>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f93b 	bl	8001726 <HAL_SYSTICK_Config>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00e      	b.n	80014d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d80a      	bhi.n	80014d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f000 f903 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_InitTick+0x5c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000020 	.word	0x20000020
 80014e4:	20000028 	.word	0x20000028
 80014e8:	20000024 	.word	0x20000024

080014ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_IncTick+0x1c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_IncTick+0x20>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <HAL_IncTick+0x20>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	20000028 	.word	0x20000028
 800150c:	200000b8 	.word	0x200000b8

08001510 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <HAL_GetTick+0x10>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	200000b8 	.word	0x200000b8

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4906      	ldr	r1, [pc, #24]	; (80015bc <__NVIC_EnableIRQ+0x34>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff90 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff2d 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff42 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff90 	bl	8001614 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5f 	bl	80015c0 <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff35 	bl	8001588 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	; 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e161      	b.n	8001a18 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8150 	bne.w	8001a12 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a97      	ldr	r2, [pc, #604]	; (80019d4 <HAL_GPIO_Init+0x294>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4a95      	ldr	r2, [pc, #596]	; (80019d4 <HAL_GPIO_Init+0x294>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4a95      	ldr	r2, [pc, #596]	; (80019d8 <HAL_GPIO_Init+0x298>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a93      	ldr	r2, [pc, #588]	; (80019d8 <HAL_GPIO_Init+0x298>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a93      	ldr	r2, [pc, #588]	; (80019dc <HAL_GPIO_Init+0x29c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a91      	ldr	r2, [pc, #580]	; (80019dc <HAL_GPIO_Init+0x29c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a91      	ldr	r2, [pc, #580]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a8f      	ldr	r2, [pc, #572]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a8f      	ldr	r2, [pc, #572]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a8d      	ldr	r2, [pc, #564]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a76      	ldr	r2, [pc, #472]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80a9 	beq.w	8001a12 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a45      	ldr	r2, [pc, #276]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3d      	ldr	r2, [pc, #244]	; (80019f4 <HAL_GPIO_Init+0x2b4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00d      	beq.n	8001920 <HAL_GPIO_Init+0x1e0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3c      	ldr	r2, [pc, #240]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d007      	beq.n	800191c <HAL_GPIO_Init+0x1dc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3b      	ldr	r2, [pc, #236]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_GPIO_Init+0x1d8>
 8001914:	2302      	movs	r3, #2
 8001916:	e004      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 8001918:	2303      	movs	r3, #3
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_GPIO_Init+0x1e2>
 8001920:	2300      	movs	r3, #0
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001932:	492f      	ldr	r1, [pc, #188]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	492b      	ldr	r1, [pc, #172]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	4927      	ldr	r1, [pc, #156]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001964:	4013      	ands	r3, r2
 8001966:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4921      	ldr	r1, [pc, #132]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	491d      	ldr	r1, [pc, #116]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 800198c:	4013      	ands	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4917      	ldr	r1, [pc, #92]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4913      	ldr	r1, [pc, #76]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01f      	beq.n	8001a04 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	490d      	ldr	r1, [pc, #52]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e01f      	b.n	8001a12 <HAL_GPIO_Init+0x2d2>
 80019d2:	bf00      	nop
 80019d4:	10320000 	.word	0x10320000
 80019d8:	10310000 	.word	0x10310000
 80019dc:	10220000 	.word	0x10220000
 80019e0:	10210000 	.word	0x10210000
 80019e4:	10120000 	.word	0x10120000
 80019e8:	10110000 	.word	0x10110000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40010800 	.word	0x40010800
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	40011000 	.word	0x40011000
 8001a00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_GPIO_Init+0x2f4>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4909      	ldr	r1, [pc, #36]	; (8001a34 <HAL_GPIO_Init+0x2f4>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3301      	adds	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f ae96 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	372c      	adds	r7, #44	; 0x2c
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a48:	787b      	ldrb	r3, [r7, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a54:	e003      	b.n	8001a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	041a      	lsls	r2, r3, #16
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e272      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d10b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	4b89      	ldr	r3, [pc, #548]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d06c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x12c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d168      	bne.n	8001b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e24c      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x76>
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7f      	ldr	r2, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e02e      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7a      	ldr	r2, [pc, #488]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a77      	ldr	r2, [pc, #476]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xbc>
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a71      	ldr	r2, [pc, #452]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b24:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fce4 	bl	8001510 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fce0 	bl	8001510 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e200      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe4>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fcd0 	bl	8001510 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fccc 	bl	8001510 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1ec      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x10c>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d063      	beq.n	8001c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	4b4c      	ldr	r3, [pc, #304]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bae:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
 8001bba:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1c0      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4939      	ldr	r1, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fc85 	bl	8001510 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fc81 	bl	8001510 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1a1      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4927      	ldr	r1, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fc64 	bl	8001510 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fc60 	bl	8001510 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e180      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03a      	beq.n	8001cec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d019      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fc44 	bl	8001510 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fc40 	bl	8001510 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e160      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f000 fa9c 	bl	80021e8 <RCC_Delay>
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fc2a 	bl	8001510 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc26 	bl	8001510 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d908      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e146      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	42420000 	.word	0x42420000
 8001cdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e9      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a6 	beq.w	8001e46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b8b      	ldr	r3, [pc, #556]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a87      	ldr	r2, [pc, #540]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b7f      	ldr	r3, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a7e      	ldr	r2, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fbe7 	bl	8001510 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff fbe3 	bl	8001510 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e103      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x312>
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	e02d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x334>
 8001d82:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a69      	ldr	r2, [pc, #420]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a66      	ldr	r2, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	e01c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x356>
 8001da4:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a60      	ldr	r2, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	4b5e      	ldr	r3, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001dbe:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb97 	bl	8001510 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fb93 	bl	8001510 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0b1      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ee      	beq.n	8001de6 <HAL_RCC_OscConfig+0x37e>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb81 	bl	8001510 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fb7d 	bl	8001510 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e09b      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8087 	beq.w	8001f5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d061      	beq.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d146      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb51 	bl	8001510 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff fb4d 	bl	8001510 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e06d      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d108      	bne.n	8001eac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	4921      	ldr	r1, [pc, #132]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a19      	ldr	r1, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	491b      	ldr	r1, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fb21 	bl	8001510 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff fb1d 	bl	8001510 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e03d      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x46a>
 8001ef0:	e035      	b.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fb0a 	bl	8001510 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff fb06 	bl	8001510 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e026      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x498>
 8001f1e:	e01e      	b.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e019      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40007000 	.word	0x40007000
 8001f34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x500>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0d0      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4965      	ldr	r1, [pc, #404]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d040      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d115      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e073      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06b      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4936      	ldr	r1, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fa58 	bl	8001510 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff fa54 	bl	8001510 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e053      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d210      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e032      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4916      	ldr	r1, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fa:	f000 f821 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1cc>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f9b6 	bl	800148c <HAL_InitTick>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	08002a4c 	.word	0x08002a4c
 8002138:	20000020 	.word	0x20000020
 800213c:	20000024 	.word	0x20000024

08002140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b04      	cmp	r3, #4
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x30>
 800216a:	2b08      	cmp	r3, #8
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x36>
 800216e:	e027      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002172:	613b      	str	r3, [r7, #16]
      break;
 8002174:	e027      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	0c9b      	lsrs	r3, r3, #18
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002180:	5cd3      	ldrb	r3, [r2, r3]
 8002182:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d010      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0c5b      	lsrs	r3, r3, #17
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021a2:	fb03 f202 	mul.w	r2, r3, r2
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e004      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b4:	fb02 f303 	mul.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	613b      	str	r3, [r7, #16]
      break;
 80021be:	e002      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021c2:	613b      	str	r3, [r7, #16]
      break;
 80021c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c6:	693b      	ldr	r3, [r7, #16]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	007a1200 	.word	0x007a1200
 80021dc:	08002a5c 	.word	0x08002a5c
 80021e0:	08002a6c 	.word	0x08002a6c
 80021e4:	003d0900 	.word	0x003d0900

080021e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <RCC_Delay+0x34>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <RCC_Delay+0x38>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002204:	bf00      	nop
  }
  while (Delay --);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	60fa      	str	r2, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <RCC_Delay+0x1c>
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000020 	.word	0x20000020
 8002220:	10624dd3 	.word	0x10624dd3

08002224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e041      	b.n	80022ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe ffce 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f000 fa56 	bl	8002714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d001      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e035      	b.n	8002348 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HAL_TIM_Base_Start_IT+0x90>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d009      	beq.n	8002312 <HAL_TIM_Base_Start_IT+0x4e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d004      	beq.n	8002312 <HAL_TIM_Base_Start_IT+0x4e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a12      	ldr	r2, [pc, #72]	; (8002358 <HAL_TIM_Base_Start_IT+0x94>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d111      	bne.n	8002336 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d010      	beq.n	8002346 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002334:	e007      	b.n	8002346 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40000400 	.word	0x40000400

0800235c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d020      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01b      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0202 	mvn.w	r2, #2
 8002390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f998 	bl	80026dc <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f98b 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f99a 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d020      	beq.n	800240c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0204 	mvn.w	r2, #4
 80023dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f972 	bl	80026dc <HAL_TIM_IC_CaptureCallback>
 80023f8:	e005      	b.n	8002406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f965 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f974 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d020      	beq.n	8002458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0208 	mvn.w	r2, #8
 8002428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2204      	movs	r2, #4
 800242e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f94c 	bl	80026dc <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f93f 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f94e 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d020      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0210 	mvn.w	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2208      	movs	r2, #8
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f926 	bl	80026dc <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f919 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f928 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0201 	mvn.w	r2, #1
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fdbe 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa6f 	bl	80029ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f8f8 	bl	8002700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0220 	mvn.w	r2, #32
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa42 	bl	80029b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_TIM_ConfigClockSource+0x1c>
 8002554:	2302      	movs	r3, #2
 8002556:	e0b4      	b.n	80026c2 <HAL_TIM_ConfigClockSource+0x186>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800257e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002590:	d03e      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0xd4>
 8002592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002596:	f200 8087 	bhi.w	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259e:	f000 8086 	beq.w	80026ae <HAL_TIM_ConfigClockSource+0x172>
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	d87f      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b70      	cmp	r3, #112	; 0x70
 80025aa:	d01a      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0xa6>
 80025ac:	2b70      	cmp	r3, #112	; 0x70
 80025ae:	d87b      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b60      	cmp	r3, #96	; 0x60
 80025b2:	d050      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0x11a>
 80025b4:	2b60      	cmp	r3, #96	; 0x60
 80025b6:	d877      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b50      	cmp	r3, #80	; 0x50
 80025ba:	d03c      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0xfa>
 80025bc:	2b50      	cmp	r3, #80	; 0x50
 80025be:	d873      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d058      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x13a>
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d86f      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b30      	cmp	r3, #48	; 0x30
 80025ca:	d064      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025cc:	2b30      	cmp	r3, #48	; 0x30
 80025ce:	d86b      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d060      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d867      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05c      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d05a      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025e0:	e062      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025f2:	f000 f96a 	bl	80028ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	609a      	str	r2, [r3, #8]
      break;
 800260e:	e04f      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002620:	f000 f953 	bl	80028ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002632:	609a      	str	r2, [r3, #8]
      break;
 8002634:	e03c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002642:	461a      	mov	r2, r3
 8002644:	f000 f8ca 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2150      	movs	r1, #80	; 0x50
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f921 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 8002654:	e02c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002662:	461a      	mov	r2, r3
 8002664:	f000 f8e8 	bl	8002838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2160      	movs	r1, #96	; 0x60
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f911 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 8002674:	e01c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f8aa 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f901 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 8002694:	e00c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f000 f8f8 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 80026a6:	e003      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e000      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
	...

08002714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <TIM_Base_SetConfig+0xc0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <TIM_Base_SetConfig+0x28>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002732:	d003      	beq.n	800273c <TIM_Base_SetConfig+0x28>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <TIM_Base_SetConfig+0xc4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d108      	bne.n	800274e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <TIM_Base_SetConfig+0xc0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <TIM_Base_SetConfig+0x52>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d003      	beq.n	8002766 <TIM_Base_SetConfig+0x52>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <TIM_Base_SetConfig+0xc4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d108      	bne.n	8002778 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <TIM_Base_SetConfig+0xc0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f023 0201 	bic.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	611a      	str	r2, [r3, #16]
  }
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400

080027dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 030a 	bic.w	r3, r3, #10
 8002818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0210 	bic.w	r2, r3, #16
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	031b      	lsls	r3, r3, #12
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002874:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f043 0307 	orr.w	r3, r3, #7
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b087      	sub	sp, #28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	021a      	lsls	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	609a      	str	r2, [r3, #8]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800291c:	2302      	movs	r3, #2
 800291e:	e041      	b.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296c:	d004      	beq.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10c      	bne.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400

080029b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <memset>:
 80029dc:	4603      	mov	r3, r0
 80029de:	4402      	add	r2, r0
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d100      	bne.n	80029e6 <memset+0xa>
 80029e4:	4770      	bx	lr
 80029e6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ea:	e7f9      	b.n	80029e0 <memset+0x4>

080029ec <__libc_init_array>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	2600      	movs	r6, #0
 80029f0:	4d0c      	ldr	r5, [pc, #48]	; (8002a24 <__libc_init_array+0x38>)
 80029f2:	4c0d      	ldr	r4, [pc, #52]	; (8002a28 <__libc_init_array+0x3c>)
 80029f4:	1b64      	subs	r4, r4, r5
 80029f6:	10a4      	asrs	r4, r4, #2
 80029f8:	42a6      	cmp	r6, r4
 80029fa:	d109      	bne.n	8002a10 <__libc_init_array+0x24>
 80029fc:	f000 f81a 	bl	8002a34 <_init>
 8002a00:	2600      	movs	r6, #0
 8002a02:	4d0a      	ldr	r5, [pc, #40]	; (8002a2c <__libc_init_array+0x40>)
 8002a04:	4c0a      	ldr	r4, [pc, #40]	; (8002a30 <__libc_init_array+0x44>)
 8002a06:	1b64      	subs	r4, r4, r5
 8002a08:	10a4      	asrs	r4, r4, #2
 8002a0a:	42a6      	cmp	r6, r4
 8002a0c:	d105      	bne.n	8002a1a <__libc_init_array+0x2e>
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
 8002a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a14:	4798      	blx	r3
 8002a16:	3601      	adds	r6, #1
 8002a18:	e7ee      	b.n	80029f8 <__libc_init_array+0xc>
 8002a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1e:	4798      	blx	r3
 8002a20:	3601      	adds	r6, #1
 8002a22:	e7f2      	b.n	8002a0a <__libc_init_array+0x1e>
 8002a24:	08002a70 	.word	0x08002a70
 8002a28:	08002a70 	.word	0x08002a70
 8002a2c:	08002a70 	.word	0x08002a70
 8002a30:	08002a74 	.word	0x08002a74

08002a34 <_init>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	bf00      	nop
 8002a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3a:	bc08      	pop	{r3}
 8002a3c:	469e      	mov	lr, r3
 8002a3e:	4770      	bx	lr

08002a40 <_fini>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	bf00      	nop
 8002a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a46:	bc08      	pop	{r3}
 8002a48:	469e      	mov	lr, r3
 8002a4a:	4770      	bx	lr
